/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  boolean,
  serial,
  text,
  jsonb,
  numeric,
  timestamp,
  type AnyPgColumn,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const enum__locales = pgEnum("enum__locales", ["en", "pl"]);
export const enum_pages_hero_links_link_type = pgEnum("enum_pages_hero_links_link_type", [
  "reference",
  "custom",
]);
export const enum_pages_hero_links_link_appearance = pgEnum("enum_pages_hero_links_link_appearance", [
  "default",
  "outline",
]);
export const enum_pages_blocks_cta_links_link_type = pgEnum("enum_pages_blocks_cta_links_link_type", [
  "reference",
  "custom",
]);
export const enum_pages_blocks_cta_links_link_appearance = pgEnum(
  "enum_pages_blocks_cta_links_link_appearance",
  ["default", "outline"],
);
export const enum_pages_blocks_cta_spacing_bottom = pgEnum("enum_pages_blocks_cta_spacing_bottom", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_cta_spacing_top = pgEnum("enum_pages_blocks_cta_spacing_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_cta_padding_bottom = pgEnum("enum_pages_blocks_cta_padding_bottom", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_cta_padding_top = pgEnum("enum_pages_blocks_cta_padding_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_content_columns_size = pgEnum("enum_pages_blocks_content_columns_size", [
  "oneSixth",
  "oneThird",
  "half",
  "twoThirds",
  "fiveSixth",
  "full",
]);
export const enum_pages_blocks_content_columns_padding_bottom = pgEnum(
  "enum_pages_blocks_content_columns_padding_bottom",
  ["none", "small", "medium", "large"],
);
export const enum_pages_blocks_content_columns_padding_top = pgEnum(
  "enum_pages_blocks_content_columns_padding_top",
  ["none", "small", "medium", "large"],
);
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  "enum_pages_blocks_content_columns_link_type",
  ["reference", "custom"],
);
export const enum_pages_blocks_content_columns_link_appearance = pgEnum(
  "enum_pages_blocks_content_columns_link_appearance",
  ["default", "outline"],
);
export const enum_pages_blocks_content_alignment = pgEnum("enum_pages_blocks_content_alignment", [
  "center",
  "left",
  "right",
  "full",
]);
export const enum_pages_blocks_content_spacing_bottom = pgEnum("enum_pages_blocks_content_spacing_bottom", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_content_spacing_top = pgEnum("enum_pages_blocks_content_spacing_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_content_padding_bottom = pgEnum("enum_pages_blocks_content_padding_bottom", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_content_padding_top = pgEnum("enum_pages_blocks_content_padding_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_content_radius_all = pgEnum("enum_pages_blocks_content_radius_all", [
  "rounded-none",
  "rounded-sm",
  "rounded-md",
  "rounded-lg",
  "rounded-xl",
  "rounded-2xl",
  "rounded-3xl",
  "rounded-full",
]);
export const enum_pages_blocks_content_radius_top_left = pgEnum("enum_pages_blocks_content_radius_top_left", [
  "rounded-tl-none",
  "rounded-tl-sm",
  "rounded-tl-md",
  "rounded-tl-lg",
  "rounded-tl-xl",
  "rounded-tl-2xl",
  "rounded-tl-3xl",
  "rounded-tl-full",
]);
export const enum_pages_blocks_content_radius_top_right = pgEnum(
  "enum_pages_blocks_content_radius_top_right",
  [
    "rounded-tr-none",
    "rounded-tr-sm",
    "rounded-tr-md",
    "rounded-tr-lg",
    "rounded-tr-xl",
    "rounded-tr-2xl",
    "rounded-tr-3xl",
    "rounded-tr-full",
  ],
);
export const enum_pages_blocks_content_radius_bottom_left = pgEnum(
  "enum_pages_blocks_content_radius_bottom_left",
  [
    "rounded-bl-none",
    "rounded-bl-sm",
    "rounded-bl-md",
    "rounded-bl-lg",
    "rounded-bl-xl",
    "rounded-bl-2xl",
    "rounded-bl-3xl",
    "rounded-bl-full",
  ],
);
export const enum_pages_blocks_content_radius_bottom_right = pgEnum(
  "enum_pages_blocks_content_radius_bottom_right",
  [
    "rounded-br-none",
    "rounded-br-sm",
    "rounded-br-md",
    "rounded-br-lg",
    "rounded-br-xl",
    "rounded-br-2xl",
    "rounded-br-3xl",
    "rounded-br-full",
  ],
);
export const enum_pages_blocks_media_block_spacing_bottom = pgEnum(
  "enum_pages_blocks_media_block_spacing_bottom",
  ["none", "small", "medium", "large"],
);
export const enum_pages_blocks_media_block_spacing_top = pgEnum("enum_pages_blocks_media_block_spacing_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_media_block_padding_bottom = pgEnum(
  "enum_pages_blocks_media_block_padding_bottom",
  ["none", "small", "medium", "large"],
);
export const enum_pages_blocks_media_block_padding_top = pgEnum("enum_pages_blocks_media_block_padding_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_archive_populate_by = pgEnum("enum_pages_blocks_archive_populate_by", [
  "collection",
  "selection",
]);
export const enum_pages_blocks_archive_relation_to = pgEnum("enum_pages_blocks_archive_relation_to", [
  "posts",
]);
export const enum_pages_blocks_carousel_slides_link_type = pgEnum(
  "enum_pages_blocks_carousel_slides_link_type",
  ["reference", "custom"],
);
export const enum_pages_blocks_carousel_slides_link_appearance = pgEnum(
  "enum_pages_blocks_carousel_slides_link_appearance",
  ["default", "outline"],
);
export const enum_pages_blocks_carousel_type = pgEnum("enum_pages_blocks_carousel_type", ["default", "logo"]);
export const enum_pages_blocks_carousel_spacing_bottom = pgEnum("enum_pages_blocks_carousel_spacing_bottom", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_carousel_spacing_top = pgEnum("enum_pages_blocks_carousel_spacing_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_carousel_padding_bottom = pgEnum("enum_pages_blocks_carousel_padding_bottom", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_carousel_padding_top = pgEnum("enum_pages_blocks_carousel_padding_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_accordion_spacing_bottom = pgEnum(
  "enum_pages_blocks_accordion_spacing_bottom",
  ["none", "small", "medium", "large"],
);
export const enum_pages_blocks_accordion_spacing_top = pgEnum("enum_pages_blocks_accordion_spacing_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_accordion_padding_bottom = pgEnum(
  "enum_pages_blocks_accordion_padding_bottom",
  ["none", "small", "medium", "large"],
);
export const enum_pages_blocks_accordion_padding_top = pgEnum("enum_pages_blocks_accordion_padding_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum_pages_blocks_hotspot_zone_type = pgEnum("enum_pages_blocks_hotspot_zone_type", [
  "category",
  "subcategory",
  "manual",
]);
export const enum_pages_blocks_hotspot_zone_appearance = pgEnum("enum_pages_blocks_hotspot_zone_appearance", [
  "default",
  "slider",
  "sliderLoop",
]);
export const enum_pages_blocks_hotspot_zone_sort = pgEnum("enum_pages_blocks_hotspot_zone_sort", [
  "-bought",
  "-createdAt",
  "createdAt",
  "variants.pricing[0].value,pricing.value",
  "-variants.pricing[0].value,-pricing.value",
]);
export const enum_pages_blocks_hotspot_zone_spacing_bottom = pgEnum(
  "enum_pages_blocks_hotspot_zone_spacing_bottom",
  ["none", "small", "medium", "large"],
);
export const enum_pages_blocks_hotspot_zone_spacing_top = pgEnum(
  "enum_pages_blocks_hotspot_zone_spacing_top",
  ["none", "small", "medium", "large"],
);
export const enum_pages_blocks_hotspot_zone_padding_bottom = pgEnum(
  "enum_pages_blocks_hotspot_zone_padding_bottom",
  ["none", "small", "medium", "large"],
);
export const enum_pages_blocks_hotspot_zone_padding_top = pgEnum(
  "enum_pages_blocks_hotspot_zone_padding_top",
  ["none", "small", "medium", "large"],
);
export const enum_pages_hero_type = pgEnum("enum_pages_hero_type", [
  "none",
  "highImpact",
  "mediumImpact",
  "lowImpact",
]);
export const enum_pages_status = pgEnum("enum_pages_status", ["draft", "published"]);
export const enum__pages_v_version_hero_links_link_type = pgEnum(
  "enum__pages_v_version_hero_links_link_type",
  ["reference", "custom"],
);
export const enum__pages_v_version_hero_links_link_appearance = pgEnum(
  "enum__pages_v_version_hero_links_link_appearance",
  ["default", "outline"],
);
export const enum__pages_v_blocks_cta_links_link_type = pgEnum("enum__pages_v_blocks_cta_links_link_type", [
  "reference",
  "custom",
]);
export const enum__pages_v_blocks_cta_links_link_appearance = pgEnum(
  "enum__pages_v_blocks_cta_links_link_appearance",
  ["default", "outline"],
);
export const enum__pages_v_blocks_cta_spacing_bottom = pgEnum("enum__pages_v_blocks_cta_spacing_bottom", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum__pages_v_blocks_cta_spacing_top = pgEnum("enum__pages_v_blocks_cta_spacing_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum__pages_v_blocks_cta_padding_bottom = pgEnum("enum__pages_v_blocks_cta_padding_bottom", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum__pages_v_blocks_cta_padding_top = pgEnum("enum__pages_v_blocks_cta_padding_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum__pages_v_blocks_content_columns_size = pgEnum("enum__pages_v_blocks_content_columns_size", [
  "oneSixth",
  "oneThird",
  "half",
  "twoThirds",
  "fiveSixth",
  "full",
]);
export const enum__pages_v_blocks_content_columns_padding_bottom = pgEnum(
  "enum__pages_v_blocks_content_columns_padding_bottom",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_content_columns_padding_top = pgEnum(
  "enum__pages_v_blocks_content_columns_padding_top",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  "enum__pages_v_blocks_content_columns_link_type",
  ["reference", "custom"],
);
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum(
  "enum__pages_v_blocks_content_columns_link_appearance",
  ["default", "outline"],
);
export const enum__pages_v_blocks_content_alignment = pgEnum("enum__pages_v_blocks_content_alignment", [
  "center",
  "left",
  "right",
  "full",
]);
export const enum__pages_v_blocks_content_spacing_bottom = pgEnum(
  "enum__pages_v_blocks_content_spacing_bottom",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_content_spacing_top = pgEnum("enum__pages_v_blocks_content_spacing_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum__pages_v_blocks_content_padding_bottom = pgEnum(
  "enum__pages_v_blocks_content_padding_bottom",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_content_padding_top = pgEnum("enum__pages_v_blocks_content_padding_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum__pages_v_blocks_content_radius_all = pgEnum("enum__pages_v_blocks_content_radius_all", [
  "rounded-none",
  "rounded-sm",
  "rounded-md",
  "rounded-lg",
  "rounded-xl",
  "rounded-2xl",
  "rounded-3xl",
  "rounded-full",
]);
export const enum__pages_v_blocks_content_radius_top_left = pgEnum(
  "enum__pages_v_blocks_content_radius_top_left",
  [
    "rounded-tl-none",
    "rounded-tl-sm",
    "rounded-tl-md",
    "rounded-tl-lg",
    "rounded-tl-xl",
    "rounded-tl-2xl",
    "rounded-tl-3xl",
    "rounded-tl-full",
  ],
);
export const enum__pages_v_blocks_content_radius_top_right = pgEnum(
  "enum__pages_v_blocks_content_radius_top_right",
  [
    "rounded-tr-none",
    "rounded-tr-sm",
    "rounded-tr-md",
    "rounded-tr-lg",
    "rounded-tr-xl",
    "rounded-tr-2xl",
    "rounded-tr-3xl",
    "rounded-tr-full",
  ],
);
export const enum__pages_v_blocks_content_radius_bottom_left = pgEnum(
  "enum__pages_v_blocks_content_radius_bottom_left",
  [
    "rounded-bl-none",
    "rounded-bl-sm",
    "rounded-bl-md",
    "rounded-bl-lg",
    "rounded-bl-xl",
    "rounded-bl-2xl",
    "rounded-bl-3xl",
    "rounded-bl-full",
  ],
);
export const enum__pages_v_blocks_content_radius_bottom_right = pgEnum(
  "enum__pages_v_blocks_content_radius_bottom_right",
  [
    "rounded-br-none",
    "rounded-br-sm",
    "rounded-br-md",
    "rounded-br-lg",
    "rounded-br-xl",
    "rounded-br-2xl",
    "rounded-br-3xl",
    "rounded-br-full",
  ],
);
export const enum__pages_v_blocks_media_block_spacing_bottom = pgEnum(
  "enum__pages_v_blocks_media_block_spacing_bottom",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_media_block_spacing_top = pgEnum(
  "enum__pages_v_blocks_media_block_spacing_top",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_media_block_padding_bottom = pgEnum(
  "enum__pages_v_blocks_media_block_padding_bottom",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_media_block_padding_top = pgEnum(
  "enum__pages_v_blocks_media_block_padding_top",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_archive_populate_by = pgEnum("enum__pages_v_blocks_archive_populate_by", [
  "collection",
  "selection",
]);
export const enum__pages_v_blocks_archive_relation_to = pgEnum("enum__pages_v_blocks_archive_relation_to", [
  "posts",
]);
export const enum__pages_v_blocks_carousel_slides_link_type = pgEnum(
  "enum__pages_v_blocks_carousel_slides_link_type",
  ["reference", "custom"],
);
export const enum__pages_v_blocks_carousel_slides_link_appearance = pgEnum(
  "enum__pages_v_blocks_carousel_slides_link_appearance",
  ["default", "outline"],
);
export const enum__pages_v_blocks_carousel_type = pgEnum("enum__pages_v_blocks_carousel_type", [
  "default",
  "logo",
]);
export const enum__pages_v_blocks_carousel_spacing_bottom = pgEnum(
  "enum__pages_v_blocks_carousel_spacing_bottom",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_carousel_spacing_top = pgEnum("enum__pages_v_blocks_carousel_spacing_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum__pages_v_blocks_carousel_padding_bottom = pgEnum(
  "enum__pages_v_blocks_carousel_padding_bottom",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_carousel_padding_top = pgEnum("enum__pages_v_blocks_carousel_padding_top", [
  "none",
  "small",
  "medium",
  "large",
]);
export const enum__pages_v_blocks_accordion_spacing_bottom = pgEnum(
  "enum__pages_v_blocks_accordion_spacing_bottom",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_accordion_spacing_top = pgEnum(
  "enum__pages_v_blocks_accordion_spacing_top",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_accordion_padding_bottom = pgEnum(
  "enum__pages_v_blocks_accordion_padding_bottom",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_accordion_padding_top = pgEnum(
  "enum__pages_v_blocks_accordion_padding_top",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_hotspot_zone_type = pgEnum("enum__pages_v_blocks_hotspot_zone_type", [
  "category",
  "subcategory",
  "manual",
]);
export const enum__pages_v_blocks_hotspot_zone_appearance = pgEnum(
  "enum__pages_v_blocks_hotspot_zone_appearance",
  ["default", "slider", "sliderLoop"],
);
export const enum__pages_v_blocks_hotspot_zone_sort = pgEnum("enum__pages_v_blocks_hotspot_zone_sort", [
  "-bought",
  "-createdAt",
  "createdAt",
  "variants.pricing[0].value,pricing.value",
  "-variants.pricing[0].value,-pricing.value",
]);
export const enum__pages_v_blocks_hotspot_zone_spacing_bottom = pgEnum(
  "enum__pages_v_blocks_hotspot_zone_spacing_bottom",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_hotspot_zone_spacing_top = pgEnum(
  "enum__pages_v_blocks_hotspot_zone_spacing_top",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_hotspot_zone_padding_bottom = pgEnum(
  "enum__pages_v_blocks_hotspot_zone_padding_bottom",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_blocks_hotspot_zone_padding_top = pgEnum(
  "enum__pages_v_blocks_hotspot_zone_padding_top",
  ["none", "small", "medium", "large"],
);
export const enum__pages_v_version_hero_type = pgEnum("enum__pages_v_version_hero_type", [
  "none",
  "highImpact",
  "mediumImpact",
  "lowImpact",
]);
export const enum__pages_v_version_status = pgEnum("enum__pages_v_version_status", ["draft", "published"]);
export const enum__pages_v_published_locale = pgEnum("enum__pages_v_published_locale", ["en", "pl"]);
export const enum_posts_status = pgEnum("enum_posts_status", ["draft", "published"]);
export const enum__posts_v_version_status = pgEnum("enum__posts_v_version_status", ["draft", "published"]);
export const enum__posts_v_published_locale = pgEnum("enum__posts_v_published_locale", ["en", "pl"]);
export const enum_customers_shippings_country = pgEnum("enum_customers_shippings_country", [
  "ad",
  "al",
  "at",
  "ba",
  "be",
  "bg",
  "by",
  "ch",
  "cy",
  "cz",
  "de",
  "dk",
  "ee",
  "es",
  "fi",
  "fr",
  "gb",
  "gr",
  "hr",
  "hu",
  "ie",
  "is",
  "it",
  "li",
  "lt",
  "lu",
  "lv",
  "mc",
  "md",
  "me",
  "mk",
  "mt",
  "nl",
  "no",
  "pl",
  "pt",
  "ro",
  "rs",
  "ru",
  "se",
  "si",
  "sk",
  "sm",
  "ua",
  "va",
]);
export const enum_customers_last_buyer_type = pgEnum("enum_customers_last_buyer_type", [
  "individual",
  "company",
]);
export const enum_orders_invoice_country = pgEnum("enum_orders_invoice_country", [
  "ad",
  "al",
  "at",
  "ba",
  "be",
  "bg",
  "by",
  "ch",
  "cy",
  "cz",
  "de",
  "dk",
  "ee",
  "es",
  "fi",
  "fr",
  "gb",
  "gr",
  "hr",
  "hu",
  "ie",
  "is",
  "it",
  "li",
  "lt",
  "lu",
  "lv",
  "mc",
  "md",
  "me",
  "mk",
  "mt",
  "nl",
  "no",
  "pl",
  "pt",
  "ro",
  "rs",
  "ru",
  "se",
  "si",
  "sk",
  "sm",
  "ua",
  "va",
]);
export const enum_orders_shipping_address_country = pgEnum("enum_orders_shipping_address_country", [
  "ad",
  "al",
  "at",
  "ba",
  "be",
  "bg",
  "by",
  "ch",
  "cy",
  "cz",
  "de",
  "dk",
  "ee",
  "es",
  "fi",
  "fr",
  "gb",
  "gr",
  "hr",
  "hu",
  "ie",
  "is",
  "it",
  "li",
  "lt",
  "lu",
  "lv",
  "mc",
  "md",
  "me",
  "mk",
  "mt",
  "nl",
  "no",
  "pl",
  "pt",
  "ro",
  "rs",
  "ru",
  "se",
  "si",
  "sk",
  "sm",
  "ua",
  "va",
]);
export const enum_orders_order_details_shipping = pgEnum("enum_orders_order_details_shipping", [
  "inpost-pickup",
  "inpost-courier",
  "inpost-courier-cod",
]);
export const enum_orders_order_details_status = pgEnum("enum_orders_order_details_status", [
  "pending",
  "paid",
  "unpaid",
  "processing",
  "shipped",
  "completed",
  "cancelled",
  "returned",
]);
export const enum_products_variants_type = pgEnum("enum_products_variants_type", [
  "sizes",
  "colors",
  "colorsAndSizes",
]);
export const enum_products_status = pgEnum("enum_products_status", ["draft", "published"]);
export const enum__products_v_version_variants_type = pgEnum("enum__products_v_version_variants_type", [
  "sizes",
  "colors",
  "colorsAndSizes",
]);
export const enum__products_v_version_status = pgEnum("enum__products_v_version_status", [
  "draft",
  "published",
]);
export const enum__products_v_published_locale = pgEnum("enum__products_v_published_locale", ["en", "pl"]);
export const enum_redirects_to_type = pgEnum("enum_redirects_to_type", ["reference", "custom"]);
export const enum_forms_confirmation_type = pgEnum("enum_forms_confirmation_type", ["message", "redirect"]);
export const enum_payload_jobs_log_task_slug = pgEnum("enum_payload_jobs_log_task_slug", [
  "inline",
  "schedulePublish",
]);
export const enum_payload_jobs_log_state = pgEnum("enum_payload_jobs_log_state", ["failed", "succeeded"]);
export const enum_payload_jobs_task_slug = pgEnum("enum_payload_jobs_task_slug", [
  "inline",
  "schedulePublish",
]);
export const enum_header_nav_items_link_type = pgEnum("enum_header_nav_items_link_type", [
  "reference",
  "custom",
]);
export const enum_header_type = pgEnum("enum_header_type", ["default", "floating"]);
export const enum_footer_nav_items_link_type = pgEnum("enum_footer_nav_items_link_type", [
  "reference",
  "custom",
]);
export const enum_email_messages_messages_template = pgEnum("enum_email_messages_messages_template", [
  "default",
]);
export const enum_shop_settings_available_currencies = pgEnum("enum_shop_settings_available_currencies", [
  "USD",
  "EUR",
  "GBP",
  "PLN",
]);
export const enum_shop_layout_product_details_type = pgEnum("enum_shop_layout_product_details_type", [
  "WithImageGalleryExpandableDetails",
]);
export const enum_shop_layout_product_list_filters = pgEnum("enum_shop_layout_product_list_filters", [
  "none",
  "withSidebar",
  "sortOnly",
]);
export const enum_shop_layout_cart_and_wishlist_type = pgEnum("enum_shop_layout_cart_and_wishlist_type", [
  "slideOver",
]);
export const enum_shop_layout_checkout_type = pgEnum("enum_shop_layout_checkout_type", [
  "OneStepWithSummary",
]);
export const enum_shop_layout_client_panel_type = pgEnum("enum_shop_layout_client_panel_type", [
  "withSidebar",
]);
export const enum_inpost_pickup_delivery_zones_countries = pgEnum(
  "enum_inpost_pickup_delivery_zones_countries",
  [
    "ad",
    "al",
    "at",
    "ba",
    "be",
    "bg",
    "by",
    "ch",
    "cy",
    "cz",
    "de",
    "dk",
    "ee",
    "es",
    "fi",
    "fr",
    "gb",
    "gr",
    "hr",
    "hu",
    "ie",
    "is",
    "it",
    "li",
    "lt",
    "lu",
    "lv",
    "mc",
    "md",
    "me",
    "mk",
    "mt",
    "nl",
    "no",
    "pl",
    "pt",
    "ro",
    "rs",
    "ru",
    "se",
    "si",
    "sk",
    "sm",
    "ua",
    "va",
  ],
);
export const enum_inpost_pickup_a_p_i_url = pgEnum("enum_inpost_pickup_a_p_i_url", [
  "https://api-shipx-pl.easypack24.net",
  "https://sandbox-api-shipx-pl.easypack24.net",
]);
export const enum_inpost_courier_delivery_zones_countries = pgEnum(
  "enum_inpost_courier_delivery_zones_countries",
  [
    "ad",
    "al",
    "at",
    "ba",
    "be",
    "bg",
    "by",
    "ch",
    "cy",
    "cz",
    "de",
    "dk",
    "ee",
    "es",
    "fi",
    "fr",
    "gb",
    "gr",
    "hr",
    "hu",
    "ie",
    "is",
    "it",
    "li",
    "lt",
    "lu",
    "lv",
    "mc",
    "md",
    "me",
    "mk",
    "mt",
    "nl",
    "no",
    "pl",
    "pt",
    "ro",
    "rs",
    "ru",
    "se",
    "si",
    "sk",
    "sm",
    "ua",
    "va",
  ],
);
export const enum_inpost_courier_a_p_i_url = pgEnum("enum_inpost_courier_a_p_i_url", [
  "https://api-shipx-pl.easypack24.net",
  "https://sandbox-api-shipx-pl.easypack24.net",
]);
export const enum_inpost_courier_cod_delivery_zones_countries = pgEnum(
  "enum_inpost_courier_cod_delivery_zones_countries",
  [
    "ad",
    "al",
    "at",
    "ba",
    "be",
    "bg",
    "by",
    "ch",
    "cy",
    "cz",
    "de",
    "dk",
    "ee",
    "es",
    "fi",
    "fr",
    "gb",
    "gr",
    "hr",
    "hu",
    "ie",
    "is",
    "it",
    "li",
    "lt",
    "lu",
    "lv",
    "mc",
    "md",
    "me",
    "mk",
    "mt",
    "nl",
    "no",
    "pl",
    "pt",
    "ro",
    "rs",
    "ru",
    "se",
    "si",
    "sk",
    "sm",
    "ua",
    "va",
  ],
);
export const enum_inpost_courier_cod_a_p_i_url = pgEnum("enum_inpost_courier_cod_a_p_i_url", [
  "https://api-shipx-pl.easypack24.net",
  "https://sandbox-api-shipx-pl.easypack24.net",
]);
export const enum_paywalls_paywall = pgEnum("enum_paywalls_paywall", ["stripe", "autopay", "p24"]);
export const enum_fulfilment_shop_address_country = pgEnum("enum_fulfilment_shop_address_country", [
  "ad",
  "al",
  "at",
  "ba",
  "be",
  "bg",
  "by",
  "ch",
  "cy",
  "cz",
  "de",
  "dk",
  "ee",
  "es",
  "fi",
  "fr",
  "gb",
  "gr",
  "hr",
  "hu",
  "ie",
  "is",
  "it",
  "li",
  "lt",
  "lu",
  "lv",
  "mc",
  "md",
  "me",
  "mk",
  "mt",
  "nl",
  "no",
  "pl",
  "pt",
  "ro",
  "rs",
  "ru",
  "se",
  "si",
  "sk",
  "sm",
  "ua",
  "va",
]);

export const pages_hero_links = pgTable(
  "pages_hero_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    link_type: enum_pages_hero_links_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_appearance: enum_pages_hero_links_link_appearance("link_appearance").default("default"),
  },
  (columns) => ({
    _orderIdx: index("pages_hero_links_order_idx").on(columns._order),
    _parentIDIdx: index("pages_hero_links_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_hero_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_hero_links_locales = pgTable(
  "pages_hero_links_locales",
  {
    link_label: varchar("link_label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("pages_hero_links_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_hero_links.id],
      name: "pages_hero_links_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_cta_links = pgTable(
  "pages_blocks_cta_links",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    link_type: enum_pages_blocks_cta_links_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_appearance: enum_pages_blocks_cta_links_link_appearance("link_appearance").default("default"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_cta_links_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_cta_links_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_cta.id],
      name: "pages_blocks_cta_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_cta_links_locales = pgTable(
  "pages_blocks_cta_links_locales",
  {
    link_label: varchar("link_label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("pages_blocks_cta_links_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_cta_links.id],
      name: "pages_blocks_cta_links_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_cta = pgTable(
  "pages_blocks_cta",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    spacingBottom: enum_pages_blocks_cta_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum_pages_blocks_cta_spacing_top("spacing_top").default("none"),
    paddingBottom: enum_pages_blocks_cta_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum_pages_blocks_cta_padding_top("padding_top").default("medium"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_cta_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_cta_parent_id_idx").on(columns._parentID),
    _pathIdx: index("pages_blocks_cta_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_cta_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_cta_locales = pgTable(
  "pages_blocks_cta_locales",
  {
    richText: jsonb("rich_text"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("pages_blocks_cta_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_cta.id],
      name: "pages_blocks_cta_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_content_columns = pgTable(
  "pages_blocks_content_columns",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    size: enum_pages_blocks_content_columns_size("size").default("oneThird"),
    enableLink: boolean("enable_link"),
    enableProse: boolean("enable_prose").default(true),
    paddingBottom: enum_pages_blocks_content_columns_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum_pages_blocks_content_columns_padding_top("padding_top").default("medium"),
    link_type: enum_pages_blocks_content_columns_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_appearance: enum_pages_blocks_content_columns_link_appearance("link_appearance").default("default"),
    background: varchar("background"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_content_columns_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_content_columns_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_content.id],
      name: "pages_blocks_content_columns_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_content_columns_locales = pgTable(
  "pages_blocks_content_columns_locales",
  {
    richText: jsonb("rich_text"),
    link_label: varchar("link_label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("pages_blocks_content_columns_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_content_columns.id],
      name: "pages_blocks_content_columns_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_content = pgTable(
  "pages_blocks_content",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    alignment: enum_pages_blocks_content_alignment("alignment").default("center"),
    spacingBottom: enum_pages_blocks_content_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum_pages_blocks_content_spacing_top("spacing_top").default("none"),
    paddingBottom: enum_pages_blocks_content_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum_pages_blocks_content_padding_top("padding_top").default("medium"),
    radius: boolean("radius").default(false),
    specifiedRadius: boolean("specified_radius").default(false),
    radiusAll: enum_pages_blocks_content_radius_all("radius_all").default("rounded-none"),
    radiusTopLeft: enum_pages_blocks_content_radius_top_left("radius_top_left").default("rounded-tl-none"),
    radiusTopRight: enum_pages_blocks_content_radius_top_right("radius_top_right").default("rounded-tr-none"),
    radiusBottomLeft:
      enum_pages_blocks_content_radius_bottom_left("radius_bottom_left").default("rounded-bl-none"),
    radiusBottomRight:
      enum_pages_blocks_content_radius_bottom_right("radius_bottom_right").default("rounded-br-none"),
    background: varchar("background"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_content_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_content_parent_id_idx").on(columns._parentID),
    _pathIdx: index("pages_blocks_content_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_content_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_media_block = pgTable(
  "pages_blocks_media_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    media: integer("media_id").references(() => media.id, {
      onDelete: "set null",
    }),
    spacingBottom: enum_pages_blocks_media_block_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum_pages_blocks_media_block_spacing_top("spacing_top").default("none"),
    paddingBottom: enum_pages_blocks_media_block_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum_pages_blocks_media_block_padding_top("padding_top").default("medium"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_media_block_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_media_block_parent_id_idx").on(columns._parentID),
    _pathIdx: index("pages_blocks_media_block_path_idx").on(columns._path),
    pages_blocks_media_block_media_idx: index("pages_blocks_media_block_media_idx").on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_media_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_archive = pgTable(
  "pages_blocks_archive",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    populateBy: enum_pages_blocks_archive_populate_by("populate_by").default("collection"),
    relationTo: enum_pages_blocks_archive_relation_to("relation_to").default("posts"),
    limit: numeric("limit").default("10"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_archive_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_archive_parent_id_idx").on(columns._parentID),
    _pathIdx: index("pages_blocks_archive_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_archive_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_archive_locales = pgTable(
  "pages_blocks_archive_locales",
  {
    introContent: jsonb("intro_content"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("pages_blocks_archive_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_archive.id],
      name: "pages_blocks_archive_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_form_block = pgTable(
  "pages_blocks_form_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    enableIntro: boolean("enable_intro"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_form_block_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_form_block_parent_id_idx").on(columns._parentID),
    _pathIdx: index("pages_blocks_form_block_path_idx").on(columns._path),
    pages_blocks_form_block_form_idx: index("pages_blocks_form_block_form_idx").on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_form_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_form_block_locales = pgTable(
  "pages_blocks_form_block_locales",
  {
    introContent: jsonb("intro_content"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("pages_blocks_form_block_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_form_block.id],
      name: "pages_blocks_form_block_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_carousel_slides = pgTable(
  "pages_blocks_carousel_slides",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    enableLink: boolean("enable_link"),
    link_type: enum_pages_blocks_carousel_slides_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_appearance: enum_pages_blocks_carousel_slides_link_appearance("link_appearance").default("default"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_carousel_slides_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_carousel_slides_parent_id_idx").on(columns._parentID),
    pages_blocks_carousel_slides_image_idx: index("pages_blocks_carousel_slides_image_idx").on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_carousel.id],
      name: "pages_blocks_carousel_slides_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_carousel_slides_locales = pgTable(
  "pages_blocks_carousel_slides_locales",
  {
    link_label: varchar("link_label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("pages_blocks_carousel_slides_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_carousel_slides.id],
      name: "pages_blocks_carousel_slides_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_carousel = pgTable(
  "pages_blocks_carousel",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    type: enum_pages_blocks_carousel_type("type").default("default"),
    autoplay: numeric("autoplay"),
    spacingBottom: enum_pages_blocks_carousel_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum_pages_blocks_carousel_spacing_top("spacing_top").default("none"),
    paddingBottom: enum_pages_blocks_carousel_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum_pages_blocks_carousel_padding_top("padding_top").default("medium"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_carousel_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_carousel_parent_id_idx").on(columns._parentID),
    _pathIdx: index("pages_blocks_carousel_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_carousel_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_carousel_locales = pgTable(
  "pages_blocks_carousel_locales",
  {
    title: jsonb("title"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("pages_blocks_carousel_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_carousel.id],
      name: "pages_blocks_carousel_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_accordion_items = pgTable(
  "pages_blocks_accordion_items",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_accordion_items_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_accordion_items_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_accordion.id],
      name: "pages_blocks_accordion_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_accordion_items_locales = pgTable(
  "pages_blocks_accordion_items_locales",
  {
    title: varchar("title"),
    content: jsonb("content"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("pages_blocks_accordion_items_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_accordion_items.id],
      name: "pages_blocks_accordion_items_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_accordion = pgTable(
  "pages_blocks_accordion",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    spacingBottom: enum_pages_blocks_accordion_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum_pages_blocks_accordion_spacing_top("spacing_top").default("none"),
    paddingBottom: enum_pages_blocks_accordion_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum_pages_blocks_accordion_padding_top("padding_top").default("medium"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_accordion_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_accordion_parent_id_idx").on(columns._parentID),
    _pathIdx: index("pages_blocks_accordion_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_accordion_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_accordion_locales = pgTable(
  "pages_blocks_accordion_locales",
  {
    title: jsonb("title"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("pages_blocks_accordion_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_accordion.id],
      name: "pages_blocks_accordion_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_hotspot_zone = pgTable(
  "pages_blocks_hotspot_zone",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    type: enum_pages_blocks_hotspot_zone_type("type").default("category"),
    appearance: enum_pages_blocks_hotspot_zone_appearance("appearance").default("default"),
    category: integer("category_id").references(() => product_categories.id, {
      onDelete: "set null",
    }),
    subcategory: integer("subcategory_id").references(() => product_sub_categories.id, {
      onDelete: "set null",
    }),
    sort: enum_pages_blocks_hotspot_zone_sort("sort"),
    limit: numeric("limit").default("4"),
    spacingBottom: enum_pages_blocks_hotspot_zone_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum_pages_blocks_hotspot_zone_spacing_top("spacing_top").default("none"),
    paddingBottom: enum_pages_blocks_hotspot_zone_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum_pages_blocks_hotspot_zone_padding_top("padding_top").default("medium"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_hotspot_zone_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_hotspot_zone_parent_id_idx").on(columns._parentID),
    _pathIdx: index("pages_blocks_hotspot_zone_path_idx").on(columns._path),
    pages_blocks_hotspot_zone_category_idx: index("pages_blocks_hotspot_zone_category_idx").on(
      columns.category,
    ),
    pages_blocks_hotspot_zone_subcategory_idx: index("pages_blocks_hotspot_zone_subcategory_idx").on(
      columns.subcategory,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_hotspot_zone_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_hotspot_zone_locales = pgTable(
  "pages_blocks_hotspot_zone_locales",
  {
    title: jsonb("title"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("pages_blocks_hotspot_zone_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_hotspot_zone.id],
      name: "pages_blocks_hotspot_zone_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages = pgTable(
  "pages",
  {
    id: serial("id").primaryKey(),
    hero_type: enum_pages_hero_type("hero_type").default("lowImpact"),
    hero_media: integer("hero_media_id").references(() => media.id, {
      onDelete: "set null",
    }),
    hero_reversed: boolean("hero_reversed").default(false),
    publishedAt: timestamp("published_at", { mode: "string", withTimezone: true, precision: 3 }),
    slug: varchar("slug"),
    slugLock: boolean("slug_lock").default(true),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status("_status").default("draft"),
  },
  (columns) => ({
    pages_hero_hero_media_idx: index("pages_hero_hero_media_idx").on(columns.hero_media),
    pages_slug_idx: index("pages_slug_idx").on(columns.slug),
    pages_updated_at_idx: index("pages_updated_at_idx").on(columns.updatedAt),
    pages_created_at_idx: index("pages_created_at_idx").on(columns.createdAt),
    pages__status_idx: index("pages__status_idx").on(columns._status),
  }),
);

export const pages_locales = pgTable(
  "pages_locales",
  {
    title: varchar("title"),
    hero_richText: jsonb("hero_rich_text"),
    meta_title: varchar("meta_title"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    meta_description: varchar("meta_description"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    pages_meta_meta_image_idx: index("pages_meta_meta_image_idx").on(columns.meta_image),
    _localeParent: uniqueIndex("pages_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_rels = pgTable(
  "pages_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
    postsID: integer("posts_id"),
    categoriesID: integer("categories_id"),
    productsID: integer("products_id"),
  },
  (columns) => ({
    order: index("pages_rels_order_idx").on(columns.order),
    parentIdx: index("pages_rels_parent_idx").on(columns.parent),
    pathIdx: index("pages_rels_path_idx").on(columns.path),
    pages_rels_pages_id_idx: index("pages_rels_pages_id_idx").on(columns.pagesID),
    pages_rels_posts_id_idx: index("pages_rels_posts_id_idx").on(columns.postsID),
    pages_rels_categories_id_idx: index("pages_rels_categories_id_idx").on(columns.categoriesID),
    pages_rels_products_id_idx: index("pages_rels_products_id_idx").on(columns.productsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [pages.id],
      name: "pages_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "pages_rels_pages_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "pages_rels_posts_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "pages_rels_categories_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "pages_rels_products_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_version_hero_links = pgTable(
  "_pages_v_version_hero_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    link_type: enum__pages_v_version_hero_links_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_appearance: enum__pages_v_version_hero_links_link_appearance("link_appearance").default("default"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_version_hero_links_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_version_hero_links_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_version_hero_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_version_hero_links_locales = pgTable(
  "_pages_v_version_hero_links_locales",
  {
    link_label: varchar("link_label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_pages_v_version_hero_links_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_version_hero_links.id],
      name: "_pages_v_version_hero_links_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_cta_links = pgTable(
  "_pages_v_blocks_cta_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    link_type: enum__pages_v_blocks_cta_links_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_appearance: enum__pages_v_blocks_cta_links_link_appearance("link_appearance").default("default"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_cta_links_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_cta_links_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: "_pages_v_blocks_cta_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_cta_links_locales = pgTable(
  "_pages_v_blocks_cta_links_locales",
  {
    link_label: varchar("link_label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_pages_v_blocks_cta_links_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_cta_links.id],
      name: "_pages_v_blocks_cta_links_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_cta = pgTable(
  "_pages_v_blocks_cta",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    spacingBottom: enum__pages_v_blocks_cta_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum__pages_v_blocks_cta_spacing_top("spacing_top").default("none"),
    paddingBottom: enum__pages_v_blocks_cta_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum__pages_v_blocks_cta_padding_top("padding_top").default("medium"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_cta_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_cta_parent_id_idx").on(columns._parentID),
    _pathIdx: index("_pages_v_blocks_cta_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_cta_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_cta_locales = pgTable(
  "_pages_v_blocks_cta_locales",
  {
    richText: jsonb("rich_text"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_pages_v_blocks_cta_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: "_pages_v_blocks_cta_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_content_columns = pgTable(
  "_pages_v_blocks_content_columns",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    size: enum__pages_v_blocks_content_columns_size("size").default("oneThird"),
    enableLink: boolean("enable_link"),
    enableProse: boolean("enable_prose").default(true),
    paddingBottom: enum__pages_v_blocks_content_columns_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum__pages_v_blocks_content_columns_padding_top("padding_top").default("medium"),
    link_type: enum__pages_v_blocks_content_columns_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_appearance:
      enum__pages_v_blocks_content_columns_link_appearance("link_appearance").default("default"),
    background: varchar("background"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_content_columns_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_content_columns_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_content.id],
      name: "_pages_v_blocks_content_columns_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_content_columns_locales = pgTable(
  "_pages_v_blocks_content_columns_locales",
  {
    richText: jsonb("rich_text"),
    link_label: varchar("link_label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_pages_v_blocks_content_columns_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_content_columns.id],
      name: "_pages_v_blocks_content_columns_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_content = pgTable(
  "_pages_v_blocks_content",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    alignment: enum__pages_v_blocks_content_alignment("alignment").default("center"),
    spacingBottom: enum__pages_v_blocks_content_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum__pages_v_blocks_content_spacing_top("spacing_top").default("none"),
    paddingBottom: enum__pages_v_blocks_content_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum__pages_v_blocks_content_padding_top("padding_top").default("medium"),
    radius: boolean("radius").default(false),
    specifiedRadius: boolean("specified_radius").default(false),
    radiusAll: enum__pages_v_blocks_content_radius_all("radius_all").default("rounded-none"),
    radiusTopLeft: enum__pages_v_blocks_content_radius_top_left("radius_top_left").default("rounded-tl-none"),
    radiusTopRight:
      enum__pages_v_blocks_content_radius_top_right("radius_top_right").default("rounded-tr-none"),
    radiusBottomLeft:
      enum__pages_v_blocks_content_radius_bottom_left("radius_bottom_left").default("rounded-bl-none"),
    radiusBottomRight:
      enum__pages_v_blocks_content_radius_bottom_right("radius_bottom_right").default("rounded-br-none"),
    background: varchar("background"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_content_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_content_parent_id_idx").on(columns._parentID),
    _pathIdx: index("_pages_v_blocks_content_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_content_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_media_block = pgTable(
  "_pages_v_blocks_media_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    media: integer("media_id").references(() => media.id, {
      onDelete: "set null",
    }),
    spacingBottom: enum__pages_v_blocks_media_block_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum__pages_v_blocks_media_block_spacing_top("spacing_top").default("none"),
    paddingBottom: enum__pages_v_blocks_media_block_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum__pages_v_blocks_media_block_padding_top("padding_top").default("medium"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_media_block_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_media_block_parent_id_idx").on(columns._parentID),
    _pathIdx: index("_pages_v_blocks_media_block_path_idx").on(columns._path),
    _pages_v_blocks_media_block_media_idx: index("_pages_v_blocks_media_block_media_idx").on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_media_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_archive = pgTable(
  "_pages_v_blocks_archive",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    populateBy: enum__pages_v_blocks_archive_populate_by("populate_by").default("collection"),
    relationTo: enum__pages_v_blocks_archive_relation_to("relation_to").default("posts"),
    limit: numeric("limit").default("10"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_archive_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_archive_parent_id_idx").on(columns._parentID),
    _pathIdx: index("_pages_v_blocks_archive_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_archive_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_archive_locales = pgTable(
  "_pages_v_blocks_archive_locales",
  {
    introContent: jsonb("intro_content"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_pages_v_blocks_archive_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_archive.id],
      name: "_pages_v_blocks_archive_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_form_block = pgTable(
  "_pages_v_blocks_form_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    enableIntro: boolean("enable_intro"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_form_block_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_form_block_parent_id_idx").on(columns._parentID),
    _pathIdx: index("_pages_v_blocks_form_block_path_idx").on(columns._path),
    _pages_v_blocks_form_block_form_idx: index("_pages_v_blocks_form_block_form_idx").on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_form_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_form_block_locales = pgTable(
  "_pages_v_blocks_form_block_locales",
  {
    introContent: jsonb("intro_content"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_pages_v_blocks_form_block_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_form_block.id],
      name: "_pages_v_blocks_form_block_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_carousel_slides = pgTable(
  "_pages_v_blocks_carousel_slides",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    enableLink: boolean("enable_link"),
    link_type: enum__pages_v_blocks_carousel_slides_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_appearance:
      enum__pages_v_blocks_carousel_slides_link_appearance("link_appearance").default("default"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_carousel_slides_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_carousel_slides_parent_id_idx").on(columns._parentID),
    _pages_v_blocks_carousel_slides_image_idx: index("_pages_v_blocks_carousel_slides_image_idx").on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_carousel.id],
      name: "_pages_v_blocks_carousel_slides_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_carousel_slides_locales = pgTable(
  "_pages_v_blocks_carousel_slides_locales",
  {
    link_label: varchar("link_label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_pages_v_blocks_carousel_slides_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_carousel_slides.id],
      name: "_pages_v_blocks_carousel_slides_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_carousel = pgTable(
  "_pages_v_blocks_carousel",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    type: enum__pages_v_blocks_carousel_type("type").default("default"),
    autoplay: numeric("autoplay"),
    spacingBottom: enum__pages_v_blocks_carousel_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum__pages_v_blocks_carousel_spacing_top("spacing_top").default("none"),
    paddingBottom: enum__pages_v_blocks_carousel_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum__pages_v_blocks_carousel_padding_top("padding_top").default("medium"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_carousel_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_carousel_parent_id_idx").on(columns._parentID),
    _pathIdx: index("_pages_v_blocks_carousel_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_carousel_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_carousel_locales = pgTable(
  "_pages_v_blocks_carousel_locales",
  {
    title: jsonb("title"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_pages_v_blocks_carousel_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_carousel.id],
      name: "_pages_v_blocks_carousel_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_accordion_items = pgTable(
  "_pages_v_blocks_accordion_items",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_accordion_items_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_accordion_items_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_accordion.id],
      name: "_pages_v_blocks_accordion_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_accordion_items_locales = pgTable(
  "_pages_v_blocks_accordion_items_locales",
  {
    title: varchar("title"),
    content: jsonb("content"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_pages_v_blocks_accordion_items_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_accordion_items.id],
      name: "_pages_v_blocks_accordion_items_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_accordion = pgTable(
  "_pages_v_blocks_accordion",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    spacingBottom: enum__pages_v_blocks_accordion_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum__pages_v_blocks_accordion_spacing_top("spacing_top").default("none"),
    paddingBottom: enum__pages_v_blocks_accordion_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum__pages_v_blocks_accordion_padding_top("padding_top").default("medium"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_accordion_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_accordion_parent_id_idx").on(columns._parentID),
    _pathIdx: index("_pages_v_blocks_accordion_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_accordion_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_accordion_locales = pgTable(
  "_pages_v_blocks_accordion_locales",
  {
    title: jsonb("title"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_pages_v_blocks_accordion_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_accordion.id],
      name: "_pages_v_blocks_accordion_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_hotspot_zone = pgTable(
  "_pages_v_blocks_hotspot_zone",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    type: enum__pages_v_blocks_hotspot_zone_type("type").default("category"),
    appearance: enum__pages_v_blocks_hotspot_zone_appearance("appearance").default("default"),
    category: integer("category_id").references(() => product_categories.id, {
      onDelete: "set null",
    }),
    subcategory: integer("subcategory_id").references(() => product_sub_categories.id, {
      onDelete: "set null",
    }),
    sort: enum__pages_v_blocks_hotspot_zone_sort("sort"),
    limit: numeric("limit").default("4"),
    spacingBottom: enum__pages_v_blocks_hotspot_zone_spacing_bottom("spacing_bottom").default("none"),
    spacingTop: enum__pages_v_blocks_hotspot_zone_spacing_top("spacing_top").default("none"),
    paddingBottom: enum__pages_v_blocks_hotspot_zone_padding_bottom("padding_bottom").default("medium"),
    paddingTop: enum__pages_v_blocks_hotspot_zone_padding_top("padding_top").default("medium"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_hotspot_zone_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_hotspot_zone_parent_id_idx").on(columns._parentID),
    _pathIdx: index("_pages_v_blocks_hotspot_zone_path_idx").on(columns._path),
    _pages_v_blocks_hotspot_zone_category_idx: index("_pages_v_blocks_hotspot_zone_category_idx").on(
      columns.category,
    ),
    _pages_v_blocks_hotspot_zone_subcategory_idx: index("_pages_v_blocks_hotspot_zone_subcategory_idx").on(
      columns.subcategory,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_hotspot_zone_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_hotspot_zone_locales = pgTable(
  "_pages_v_blocks_hotspot_zone_locales",
  {
    title: jsonb("title"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_pages_v_blocks_hotspot_zone_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_hotspot_zone.id],
      name: "_pages_v_blocks_hotspot_zone_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v = pgTable(
  "_pages_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => pages.id, {
      onDelete: "set null",
    }),
    version_hero_type: enum__pages_v_version_hero_type("version_hero_type").default("lowImpact"),
    version_hero_media: integer("version_hero_media_id").references(() => media.id, {
      onDelete: "set null",
    }),
    version_hero_reversed: boolean("version_hero_reversed").default(false),
    version_publishedAt: timestamp("version_published_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar("version_slug"),
    version_slugLock: boolean("version_slug_lock").default(true),
    version_updatedAt: timestamp("version_updated_at", { mode: "string", withTimezone: true, precision: 3 }),
    version_createdAt: timestamp("version_created_at", { mode: "string", withTimezone: true, precision: 3 }),
    version__status: enum__pages_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean("snapshot"),
    publishedLocale: enum__pages_v_published_locale("published_locale"),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _pages_v_parent_idx: index("_pages_v_parent_idx").on(columns.parent),
    _pages_v_version_hero_version_hero_media_idx: index("_pages_v_version_hero_version_hero_media_idx").on(
      columns.version_hero_media,
    ),
    _pages_v_version_version_slug_idx: index("_pages_v_version_version_slug_idx").on(columns.version_slug),
    _pages_v_version_version_updated_at_idx: index("_pages_v_version_version_updated_at_idx").on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index("_pages_v_version_version_created_at_idx").on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index("_pages_v_version_version__status_idx").on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index("_pages_v_created_at_idx").on(columns.createdAt),
    _pages_v_updated_at_idx: index("_pages_v_updated_at_idx").on(columns.updatedAt),
    _pages_v_snapshot_idx: index("_pages_v_snapshot_idx").on(columns.snapshot),
    _pages_v_published_locale_idx: index("_pages_v_published_locale_idx").on(columns.publishedLocale),
    _pages_v_latest_idx: index("_pages_v_latest_idx").on(columns.latest),
    _pages_v_autosave_idx: index("_pages_v_autosave_idx").on(columns.autosave),
  }),
);

export const _pages_v_locales = pgTable(
  "_pages_v_locales",
  {
    version_title: varchar("version_title"),
    version_hero_richText: jsonb("version_hero_rich_text"),
    version_meta_title: varchar("version_meta_title"),
    version_meta_image: integer("version_meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    version_meta_description: varchar("version_meta_description"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _pages_v_version_meta_version_meta_image_idx: index("_pages_v_version_meta_version_meta_image_idx").on(
      columns.version_meta_image,
    ),
    _localeParent: uniqueIndex("_pages_v_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_rels = pgTable(
  "_pages_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
    postsID: integer("posts_id"),
    categoriesID: integer("categories_id"),
    productsID: integer("products_id"),
  },
  (columns) => ({
    order: index("_pages_v_rels_order_idx").on(columns.order),
    parentIdx: index("_pages_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_pages_v_rels_path_idx").on(columns.path),
    _pages_v_rels_pages_id_idx: index("_pages_v_rels_pages_id_idx").on(columns.pagesID),
    _pages_v_rels_posts_id_idx: index("_pages_v_rels_posts_id_idx").on(columns.postsID),
    _pages_v_rels_categories_id_idx: index("_pages_v_rels_categories_id_idx").on(columns.categoriesID),
    _pages_v_rels_products_id_idx: index("_pages_v_rels_products_id_idx").on(columns.productsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "_pages_v_rels_pages_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "_pages_v_rels_posts_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "_pages_v_rels_categories_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "_pages_v_rels_products_fk",
    }).onDelete("cascade"),
  }),
);

export const posts_populated_authors = pgTable(
  "posts_populated_authors",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name"),
  },
  (columns) => ({
    _orderIdx: index("posts_populated_authors_order_idx").on(columns._order),
    _parentIDIdx: index("posts_populated_authors_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts.id],
      name: "posts_populated_authors_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const posts = pgTable(
  "posts",
  {
    id: serial("id").primaryKey(),
    heroImage: integer("hero_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    publishedAt: timestamp("published_at", { mode: "string", withTimezone: true, precision: 3 }),
    slug: varchar("slug"),
    slugLock: boolean("slug_lock").default(true),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status("_status").default("draft"),
  },
  (columns) => ({
    posts_hero_image_idx: index("posts_hero_image_idx").on(columns.heroImage),
    posts_slug_idx: index("posts_slug_idx").on(columns.slug),
    posts_updated_at_idx: index("posts_updated_at_idx").on(columns.updatedAt),
    posts_created_at_idx: index("posts_created_at_idx").on(columns.createdAt),
    posts__status_idx: index("posts__status_idx").on(columns._status),
  }),
);

export const posts_locales = pgTable(
  "posts_locales",
  {
    title: varchar("title"),
    content: jsonb("content"),
    meta_title: varchar("meta_title"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    meta_description: varchar("meta_description"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    posts_meta_meta_image_idx: index("posts_meta_meta_image_idx").on(columns.meta_image),
    _localeParent: uniqueIndex("posts_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts.id],
      name: "posts_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const posts_rels = pgTable(
  "posts_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    postsID: integer("posts_id"),
    categoriesID: integer("categories_id"),
    administratorsID: integer("administrators_id"),
  },
  (columns) => ({
    order: index("posts_rels_order_idx").on(columns.order),
    parentIdx: index("posts_rels_parent_idx").on(columns.parent),
    pathIdx: index("posts_rels_path_idx").on(columns.path),
    posts_rels_posts_id_idx: index("posts_rels_posts_id_idx").on(columns.postsID),
    posts_rels_categories_id_idx: index("posts_rels_categories_id_idx").on(columns.categoriesID),
    posts_rels_administrators_id_idx: index("posts_rels_administrators_id_idx").on(columns.administratorsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [posts.id],
      name: "posts_rels_parent_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "posts_rels_posts_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "posts_rels_categories_fk",
    }).onDelete("cascade"),
    administratorsIdFk: foreignKey({
      columns: [columns["administratorsID"]],
      foreignColumns: [administrators.id],
      name: "posts_rels_administrators_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v_version_populated_authors = pgTable(
  "_posts_v_version_populated_authors",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    _uuid: varchar("_uuid"),
    name: varchar("name"),
  },
  (columns) => ({
    _orderIdx: index("_posts_v_version_populated_authors_order_idx").on(columns._order),
    _parentIDIdx: index("_posts_v_version_populated_authors_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_version_populated_authors_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v = pgTable(
  "_posts_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => posts.id, {
      onDelete: "set null",
    }),
    version_heroImage: integer("version_hero_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    version_publishedAt: timestamp("version_published_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar("version_slug"),
    version_slugLock: boolean("version_slug_lock").default(true),
    version_updatedAt: timestamp("version_updated_at", { mode: "string", withTimezone: true, precision: 3 }),
    version_createdAt: timestamp("version_created_at", { mode: "string", withTimezone: true, precision: 3 }),
    version__status: enum__posts_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean("snapshot"),
    publishedLocale: enum__posts_v_published_locale("published_locale"),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _posts_v_parent_idx: index("_posts_v_parent_idx").on(columns.parent),
    _posts_v_version_version_hero_image_idx: index("_posts_v_version_version_hero_image_idx").on(
      columns.version_heroImage,
    ),
    _posts_v_version_version_slug_idx: index("_posts_v_version_version_slug_idx").on(columns.version_slug),
    _posts_v_version_version_updated_at_idx: index("_posts_v_version_version_updated_at_idx").on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index("_posts_v_version_version_created_at_idx").on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index("_posts_v_version_version__status_idx").on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index("_posts_v_created_at_idx").on(columns.createdAt),
    _posts_v_updated_at_idx: index("_posts_v_updated_at_idx").on(columns.updatedAt),
    _posts_v_snapshot_idx: index("_posts_v_snapshot_idx").on(columns.snapshot),
    _posts_v_published_locale_idx: index("_posts_v_published_locale_idx").on(columns.publishedLocale),
    _posts_v_latest_idx: index("_posts_v_latest_idx").on(columns.latest),
    _posts_v_autosave_idx: index("_posts_v_autosave_idx").on(columns.autosave),
  }),
);

export const _posts_v_locales = pgTable(
  "_posts_v_locales",
  {
    version_title: varchar("version_title"),
    version_content: jsonb("version_content"),
    version_meta_title: varchar("version_meta_title"),
    version_meta_image: integer("version_meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    version_meta_description: varchar("version_meta_description"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _posts_v_version_meta_version_meta_image_idx: index("_posts_v_version_meta_version_meta_image_idx").on(
      columns.version_meta_image,
    ),
    _localeParent: uniqueIndex("_posts_v_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v_rels = pgTable(
  "_posts_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    postsID: integer("posts_id"),
    categoriesID: integer("categories_id"),
    administratorsID: integer("administrators_id"),
  },
  (columns) => ({
    order: index("_posts_v_rels_order_idx").on(columns.order),
    parentIdx: index("_posts_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_posts_v_rels_path_idx").on(columns.path),
    _posts_v_rels_posts_id_idx: index("_posts_v_rels_posts_id_idx").on(columns.postsID),
    _posts_v_rels_categories_id_idx: index("_posts_v_rels_categories_id_idx").on(columns.categoriesID),
    _posts_v_rels_administrators_id_idx: index("_posts_v_rels_administrators_id_idx").on(
      columns.administratorsID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_rels_parent_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "_posts_v_rels_posts_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "_posts_v_rels_categories_fk",
    }).onDelete("cascade"),
    administratorsIdFk: foreignKey({
      columns: [columns["administratorsID"]],
      foreignColumns: [administrators.id],
      name: "_posts_v_rels_administrators_fk",
    }).onDelete("cascade"),
  }),
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
    sizes_thumbnail_url: varchar("sizes_thumbnail_url"),
    sizes_thumbnail_width: numeric("sizes_thumbnail_width"),
    sizes_thumbnail_height: numeric("sizes_thumbnail_height"),
    sizes_thumbnail_mimeType: varchar("sizes_thumbnail_mime_type"),
    sizes_thumbnail_filesize: numeric("sizes_thumbnail_filesize"),
    sizes_thumbnail_filename: varchar("sizes_thumbnail_filename"),
    sizes_square_url: varchar("sizes_square_url"),
    sizes_square_width: numeric("sizes_square_width"),
    sizes_square_height: numeric("sizes_square_height"),
    sizes_square_mimeType: varchar("sizes_square_mime_type"),
    sizes_square_filesize: numeric("sizes_square_filesize"),
    sizes_square_filename: varchar("sizes_square_filename"),
    sizes_small_url: varchar("sizes_small_url"),
    sizes_small_width: numeric("sizes_small_width"),
    sizes_small_height: numeric("sizes_small_height"),
    sizes_small_mimeType: varchar("sizes_small_mime_type"),
    sizes_small_filesize: numeric("sizes_small_filesize"),
    sizes_small_filename: varchar("sizes_small_filename"),
    sizes_medium_url: varchar("sizes_medium_url"),
    sizes_medium_width: numeric("sizes_medium_width"),
    sizes_medium_height: numeric("sizes_medium_height"),
    sizes_medium_mimeType: varchar("sizes_medium_mime_type"),
    sizes_medium_filesize: numeric("sizes_medium_filesize"),
    sizes_medium_filename: varchar("sizes_medium_filename"),
    sizes_large_url: varchar("sizes_large_url"),
    sizes_large_width: numeric("sizes_large_width"),
    sizes_large_height: numeric("sizes_large_height"),
    sizes_large_mimeType: varchar("sizes_large_mime_type"),
    sizes_large_filesize: numeric("sizes_large_filesize"),
    sizes_large_filename: varchar("sizes_large_filename"),
    sizes_xlarge_url: varchar("sizes_xlarge_url"),
    sizes_xlarge_width: numeric("sizes_xlarge_width"),
    sizes_xlarge_height: numeric("sizes_xlarge_height"),
    sizes_xlarge_mimeType: varchar("sizes_xlarge_mime_type"),
    sizes_xlarge_filesize: numeric("sizes_xlarge_filesize"),
    sizes_xlarge_filename: varchar("sizes_xlarge_filename"),
    sizes_og_url: varchar("sizes_og_url"),
    sizes_og_width: numeric("sizes_og_width"),
    sizes_og_height: numeric("sizes_og_height"),
    sizes_og_mimeType: varchar("sizes_og_mime_type"),
    sizes_og_filesize: numeric("sizes_og_filesize"),
    sizes_og_filename: varchar("sizes_og_filename"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      "media_sizes_thumbnail_sizes_thumbnail_filename_idx",
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index("media_sizes_square_sizes_square_filename_idx").on(
      columns.sizes_square_filename,
    ),
    media_sizes_small_sizes_small_filename_idx: index("media_sizes_small_sizes_small_filename_idx").on(
      columns.sizes_small_filename,
    ),
    media_sizes_medium_sizes_medium_filename_idx: index("media_sizes_medium_sizes_medium_filename_idx").on(
      columns.sizes_medium_filename,
    ),
    media_sizes_large_sizes_large_filename_idx: index("media_sizes_large_sizes_large_filename_idx").on(
      columns.sizes_large_filename,
    ),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index("media_sizes_xlarge_sizes_xlarge_filename_idx").on(
      columns.sizes_xlarge_filename,
    ),
    media_sizes_og_sizes_og_filename_idx: index("media_sizes_og_sizes_og_filename_idx").on(
      columns.sizes_og_filename,
    ),
  }),
);

export const media_locales = pgTable(
  "media_locales",
  {
    alt: varchar("alt").notNull(),
    caption: jsonb("caption"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("media_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [media.id],
      name: "media_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const categories_breadcrumbs = pgTable(
  "categories_breadcrumbs",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _locale: enum__locales("_locale").notNull(),
    id: varchar("id").primaryKey(),
    doc: integer("doc_id").references(() => categories.id, {
      onDelete: "set null",
    }),
    url: varchar("url"),
    label: varchar("label"),
  },
  (columns) => ({
    _orderIdx: index("categories_breadcrumbs_order_idx").on(columns._order),
    _parentIDIdx: index("categories_breadcrumbs_parent_id_idx").on(columns._parentID),
    _localeIdx: index("categories_breadcrumbs_locale_idx").on(columns._locale),
    categories_breadcrumbs_doc_idx: index("categories_breadcrumbs_doc_idx").on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [categories.id],
      name: "categories_breadcrumbs_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const categories = pgTable(
  "categories",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references((): AnyPgColumn => categories.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_parent_idx: index("categories_parent_idx").on(columns.parent),
    categories_updated_at_idx: index("categories_updated_at_idx").on(columns.updatedAt),
    categories_created_at_idx: index("categories_created_at_idx").on(columns.createdAt),
  }),
);

export const categories_locales = pgTable(
  "categories_locales",
  {
    title: varchar("title").notNull(),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("categories_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [categories.id],
      name: "categories_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const administrators_sessions = pgTable(
  "administrators_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
    expiresAt: timestamp("expires_at", { mode: "string", withTimezone: true, precision: 3 }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("administrators_sessions_order_idx").on(columns._order),
    _parentIDIdx: index("administrators_sessions_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [administrators.id],
      name: "administrators_sessions_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const administrators = pgTable(
  "administrators",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", { mode: "string", withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    administrators_updated_at_idx: index("administrators_updated_at_idx").on(columns.updatedAt),
    administrators_created_at_idx: index("administrators_created_at_idx").on(columns.createdAt),
    administrators_email_idx: uniqueIndex("administrators_email_idx").on(columns.email),
  }),
);

export const customers_shippings = pgTable(
  "customers_shippings",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    address: varchar("address").notNull(),
    city: varchar("city").notNull(),
    country: enum_customers_shippings_country("country").notNull(),
    region: varchar("region").notNull(),
    postalCode: varchar("postal_code").notNull(),
    phone: varchar("phone").notNull(),
    email: varchar("email").notNull(),
    default: boolean("default").default(false),
  },
  (columns) => ({
    _orderIdx: index("customers_shippings_order_idx").on(columns._order),
    _parentIDIdx: index("customers_shippings_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [customers.id],
      name: "customers_shippings_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const customers_sessions = pgTable(
  "customers_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
    expiresAt: timestamp("expires_at", { mode: "string", withTimezone: true, precision: 3 }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("customers_sessions_order_idx").on(columns._order),
    _parentIDIdx: index("customers_sessions_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [customers.id],
      name: "customers_sessions_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const customers = pgTable(
  "customers",
  {
    id: serial("id").primaryKey(),
    fullName: varchar("full_name"),
    firstName: varchar("first_name"),
    lastName: varchar("last_name"),
    birthDate: timestamp("birth_date", { mode: "string", withTimezone: true, precision: 3 }),
    lastBuyerType: enum_customers_last_buyer_type("last_buyer_type"),
    cart: jsonb("cart"),
    wishlist: jsonb("wishlist"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    _verified: boolean("_verified"),
    _verificationToken: varchar("_verificationtoken"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", { mode: "string", withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    customers_updated_at_idx: index("customers_updated_at_idx").on(columns.updatedAt),
    customers_created_at_idx: index("customers_created_at_idx").on(columns.createdAt),
    customers_email_idx: uniqueIndex("customers_email_idx").on(columns.email),
  }),
);

export const orders_products = pgTable(
  "orders_products",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    product: integer("product_id").references(() => products.id, {
      onDelete: "set null",
    }),
    productName: varchar("product_name"),
    isFromAPI: boolean("is_from_a_p_i").notNull().default(false),
    color: varchar("color"),
    size: varchar("size"),
    variantSlug: varchar("variant_slug"),
    quantity: numeric("quantity").notNull(),
    price: numeric("price"),
    autoprice: boolean("autoprice").default(false),
    priceTotal: numeric("price_total").notNull(),
  },
  (columns) => ({
    _orderIdx: index("orders_products_order_idx").on(columns._order),
    _parentIDIdx: index("orders_products_parent_id_idx").on(columns._parentID),
    orders_products_product_idx: index("orders_products_product_idx").on(columns.product),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [orders.id],
      name: "orders_products_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const orders = pgTable(
  "orders",
  {
    id: varchar("id").primaryKey(),
    customer: integer("customer_id").references(() => customers.id, {
      onDelete: "set null",
    }),
    date: timestamp("date", { mode: "string", withTimezone: true, precision: 3 }),
    extractedFromStock: boolean("extracted_from_stock"),
    invoice_isCompany: boolean("invoice_is_company"),
    invoice_name: varchar("invoice_name"),
    invoice_tin: varchar("invoice_tin"),
    invoice_address: varchar("invoice_address"),
    invoice_city: varchar("invoice_city"),
    invoice_country: enum_orders_invoice_country("invoice_country"),
    invoice_region: varchar("invoice_region"),
    invoice_postalCode: varchar("invoice_postal_code"),
    printLabel_packageNumber: varchar("print_label_package_number"),
    printLabel_width: numeric("print_label_width").default("0"),
    printLabel_height: numeric("print_label_height").default("0"),
    printLabel_length: numeric("print_label_length").default("0"),
    printLabel_weight: numeric("print_label_weight").default("0"),
    printLabel_dimension: varchar("print_label_dimension").default("small"),
    shippingAddress_name: varchar("shipping_address_name").notNull(),
    shippingAddress_address: varchar("shipping_address_address").notNull(),
    shippingAddress_pickupPointID: varchar("shipping_address_pickup_point_i_d"),
    shippingAddress_pickupPointAddress: varchar("shipping_address_pickup_point_address"),
    shippingAddress_city: varchar("shipping_address_city").notNull(),
    shippingAddress_country: enum_orders_shipping_address_country("shipping_address_country").notNull(),
    shippingAddress_region: varchar("shipping_address_region").notNull(),
    shippingAddress_postalCode: varchar("shipping_address_postal_code").notNull(),
    shippingAddress_email: varchar("shipping_address_email").notNull(),
    shippingAddress_phone: varchar("shipping_address_phone").notNull(),
    orderDetails_total: numeric("order_details_total").notNull(),
    orderDetails_shippingCost: numeric("order_details_shipping_cost").notNull(),
    orderDetails_totalWithShipping: numeric("order_details_total_with_shipping").notNull(),
    orderDetails_currency: varchar("order_details_currency").notNull(),
    orderDetails_amountPaid: numeric("order_details_amount_paid").default("0"),
    orderDetails_shipping: enum_orders_order_details_shipping("order_details_shipping"),
    orderDetails_transactionID: varchar("order_details_transaction_i_d"),
    orderDetails_status: enum_orders_order_details_status("order_details_status")
      .notNull()
      .default("pending"),
    orderDetails_shippingDate: timestamp("order_details_shipping_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    orderDetails_trackingNumber: varchar("order_details_tracking_number"),
    orderDetails_orderNote: varchar("order_details_order_note"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    orders_customer_idx: index("orders_customer_idx").on(columns.customer),
    orders_updated_at_idx: index("orders_updated_at_idx").on(columns.updatedAt),
    orders_created_at_idx: index("orders_created_at_idx").on(columns.createdAt),
  }),
);

export const products_details = pgTable(
  "products_details",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
  },
  (columns) => ({
    _orderIdx: index("products_details_order_idx").on(columns._order),
    _parentIDIdx: index("products_details_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_details_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_details_locales = pgTable(
  "products_details_locales",
  {
    title: varchar("title"),
    content: jsonb("content"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("products_details_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products_details.id],
      name: "products_details_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_colors = pgTable(
  "products_colors",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    slug: varchar("slug"),
    colorValue: varchar("color_value"),
  },
  (columns) => ({
    _orderIdx: index("products_colors_order_idx").on(columns._order),
    _parentIDIdx: index("products_colors_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_colors_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_colors_locales = pgTable(
  "products_colors_locales",
  {
    label: varchar("label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("products_colors_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products_colors.id],
      name: "products_colors_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_sizes = pgTable(
  "products_sizes",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    slug: varchar("slug"),
  },
  (columns) => ({
    _orderIdx: index("products_sizes_order_idx").on(columns._order),
    _parentIDIdx: index("products_sizes_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_sizes_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_sizes_locales = pgTable(
  "products_sizes_locales",
  {
    label: varchar("label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("products_sizes_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products_sizes.id],
      name: "products_sizes_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_variants_pricing = pgTable(
  "products_variants_pricing",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    value: numeric("value"),
    currency: varchar("currency"),
  },
  (columns) => ({
    _orderIdx: index("products_variants_pricing_order_idx").on(columns._order),
    _parentIDIdx: index("products_variants_pricing_parent_id_idx").on(columns._parentID),
    products_variants_pricing_value_idx: index("products_variants_pricing_value_idx").on(columns.value),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products_variants.id],
      name: "products_variants_pricing_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_variants = pgTable(
  "products_variants",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    size: varchar("size"),
    color: varchar("color"),
    variantSlug: varchar("variant_slug"),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    stock: numeric("stock").default("0"),
    weight: numeric("weight").default("0"),
  },
  (columns) => ({
    _orderIdx: index("products_variants_order_idx").on(columns._order),
    _parentIDIdx: index("products_variants_parent_id_idx").on(columns._parentID),
    products_variants_size_idx: index("products_variants_size_idx").on(columns.size),
    products_variants_color_idx: index("products_variants_color_idx").on(columns.color),
    products_variants_image_idx: index("products_variants_image_idx").on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_variants_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_categories_arr = pgTable(
  "products_categories_arr",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    category: integer("category_id").references(() => product_categories.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("products_categories_arr_order_idx").on(columns._order),
    _parentIDIdx: index("products_categories_arr_parent_id_idx").on(columns._parentID),
    products_categories_arr_category_idx: index("products_categories_arr_category_idx").on(columns.category),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_categories_arr_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_pricing = pgTable(
  "products_pricing",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    value: numeric("value"),
    currency: varchar("currency"),
  },
  (columns) => ({
    _orderIdx: index("products_pricing_order_idx").on(columns._order),
    _parentIDIdx: index("products_pricing_parent_id_idx").on(columns._parentID),
    products_pricing_value_idx: index("products_pricing_value_idx").on(columns.value),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_pricing_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products = pgTable(
  "products",
  {
    id: serial("id").primaryKey(),
    slug: varchar("slug"),
    slugLock: boolean("slug_lock").default(true),
    enableVariants: boolean("enable_variants"),
    enableVariantPrices: boolean("enable_variant_prices"),
    enableVariantWeights: boolean("enable_variant_weights"),
    variantsType: enum_products_variants_type("variants_type").default("sizes"),
    stock: numeric("stock").default("0"),
    weight: numeric("weight").default("0"),
    bought: numeric("bought").default("0"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_products_status("_status").default("draft"),
  },
  (columns) => ({
    products_slug_idx: index("products_slug_idx").on(columns.slug),
    products_bought_idx: index("products_bought_idx").on(columns.bought),
    products_updated_at_idx: index("products_updated_at_idx").on(columns.updatedAt),
    products_created_at_idx: index("products_created_at_idx").on(columns.createdAt),
    products__status_idx: index("products__status_idx").on(columns._status),
  }),
);

export const products_locales = pgTable(
  "products_locales",
  {
    title: varchar("title"),
    description: jsonb("description"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("products_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_rels = pgTable(
  "products_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
    productSubCategoriesID: integer("product_sub_categories_id"),
  },
  (columns) => ({
    order: index("products_rels_order_idx").on(columns.order),
    parentIdx: index("products_rels_parent_idx").on(columns.parent),
    pathIdx: index("products_rels_path_idx").on(columns.path),
    products_rels_media_id_idx: index("products_rels_media_id_idx").on(columns.mediaID),
    products_rels_product_sub_categories_id_idx: index("products_rels_product_sub_categories_id_idx").on(
      columns.productSubCategoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [products.id],
      name: "products_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "products_rels_media_fk",
    }).onDelete("cascade"),
    productSubCategoriesIdFk: foreignKey({
      columns: [columns["productSubCategoriesID"]],
      foreignColumns: [product_sub_categories.id],
      name: "products_rels_product_sub_categories_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_details = pgTable(
  "_products_v_version_details",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_version_details_order_idx").on(columns._order),
    _parentIDIdx: index("_products_v_version_details_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_version_details_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_details_locales = pgTable(
  "_products_v_version_details_locales",
  {
    title: varchar("title"),
    content: jsonb("content"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_products_v_version_details_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v_version_details.id],
      name: "_products_v_version_details_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_colors = pgTable(
  "_products_v_version_colors",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    slug: varchar("slug"),
    colorValue: varchar("color_value"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_version_colors_order_idx").on(columns._order),
    _parentIDIdx: index("_products_v_version_colors_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_version_colors_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_colors_locales = pgTable(
  "_products_v_version_colors_locales",
  {
    label: varchar("label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_products_v_version_colors_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v_version_colors.id],
      name: "_products_v_version_colors_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_sizes = pgTable(
  "_products_v_version_sizes",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    slug: varchar("slug"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_version_sizes_order_idx").on(columns._order),
    _parentIDIdx: index("_products_v_version_sizes_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_version_sizes_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_sizes_locales = pgTable(
  "_products_v_version_sizes_locales",
  {
    label: varchar("label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_products_v_version_sizes_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v_version_sizes.id],
      name: "_products_v_version_sizes_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_variants_pricing = pgTable(
  "_products_v_version_variants_pricing",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    value: numeric("value"),
    currency: varchar("currency"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_version_variants_pricing_order_idx").on(columns._order),
    _parentIDIdx: index("_products_v_version_variants_pricing_parent_id_idx").on(columns._parentID),
    _products_v_version_variants_pricing_value_idx: index(
      "_products_v_version_variants_pricing_value_idx",
    ).on(columns.value),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v_version_variants.id],
      name: "_products_v_version_variants_pricing_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_variants = pgTable(
  "_products_v_version_variants",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    size: varchar("size"),
    color: varchar("color"),
    variantSlug: varchar("variant_slug"),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    stock: numeric("stock").default("0"),
    weight: numeric("weight").default("0"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_version_variants_order_idx").on(columns._order),
    _parentIDIdx: index("_products_v_version_variants_parent_id_idx").on(columns._parentID),
    _products_v_version_variants_size_idx: index("_products_v_version_variants_size_idx").on(columns.size),
    _products_v_version_variants_color_idx: index("_products_v_version_variants_color_idx").on(columns.color),
    _products_v_version_variants_image_idx: index("_products_v_version_variants_image_idx").on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_version_variants_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_categories_arr = pgTable(
  "_products_v_version_categories_arr",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    category: integer("category_id").references(() => product_categories.id, {
      onDelete: "set null",
    }),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_version_categories_arr_order_idx").on(columns._order),
    _parentIDIdx: index("_products_v_version_categories_arr_parent_id_idx").on(columns._parentID),
    _products_v_version_categories_arr_category_idx: index(
      "_products_v_version_categories_arr_category_idx",
    ).on(columns.category),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_version_categories_arr_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_pricing = pgTable(
  "_products_v_version_pricing",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    value: numeric("value"),
    currency: varchar("currency"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_version_pricing_order_idx").on(columns._order),
    _parentIDIdx: index("_products_v_version_pricing_parent_id_idx").on(columns._parentID),
    _products_v_version_pricing_value_idx: index("_products_v_version_pricing_value_idx").on(columns.value),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_version_pricing_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v = pgTable(
  "_products_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => products.id, {
      onDelete: "set null",
    }),
    version_slug: varchar("version_slug"),
    version_slugLock: boolean("version_slug_lock").default(true),
    version_enableVariants: boolean("version_enable_variants"),
    version_enableVariantPrices: boolean("version_enable_variant_prices"),
    version_enableVariantWeights: boolean("version_enable_variant_weights"),
    version_variantsType: enum__products_v_version_variants_type("version_variants_type").default("sizes"),
    version_stock: numeric("version_stock").default("0"),
    version_weight: numeric("version_weight").default("0"),
    version_bought: numeric("version_bought").default("0"),
    version_updatedAt: timestamp("version_updated_at", { mode: "string", withTimezone: true, precision: 3 }),
    version_createdAt: timestamp("version_created_at", { mode: "string", withTimezone: true, precision: 3 }),
    version__status: enum__products_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean("snapshot"),
    publishedLocale: enum__products_v_published_locale("published_locale"),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _products_v_parent_idx: index("_products_v_parent_idx").on(columns.parent),
    _products_v_version_version_slug_idx: index("_products_v_version_version_slug_idx").on(
      columns.version_slug,
    ),
    _products_v_version_version_bought_idx: index("_products_v_version_version_bought_idx").on(
      columns.version_bought,
    ),
    _products_v_version_version_updated_at_idx: index("_products_v_version_version_updated_at_idx").on(
      columns.version_updatedAt,
    ),
    _products_v_version_version_created_at_idx: index("_products_v_version_version_created_at_idx").on(
      columns.version_createdAt,
    ),
    _products_v_version_version__status_idx: index("_products_v_version_version__status_idx").on(
      columns.version__status,
    ),
    _products_v_created_at_idx: index("_products_v_created_at_idx").on(columns.createdAt),
    _products_v_updated_at_idx: index("_products_v_updated_at_idx").on(columns.updatedAt),
    _products_v_snapshot_idx: index("_products_v_snapshot_idx").on(columns.snapshot),
    _products_v_published_locale_idx: index("_products_v_published_locale_idx").on(columns.publishedLocale),
    _products_v_latest_idx: index("_products_v_latest_idx").on(columns.latest),
    _products_v_autosave_idx: index("_products_v_autosave_idx").on(columns.autosave),
  }),
);

export const _products_v_locales = pgTable(
  "_products_v_locales",
  {
    version_title: varchar("version_title"),
    version_description: jsonb("version_description"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("_products_v_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_rels = pgTable(
  "_products_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
    productSubCategoriesID: integer("product_sub_categories_id"),
  },
  (columns) => ({
    order: index("_products_v_rels_order_idx").on(columns.order),
    parentIdx: index("_products_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_products_v_rels_path_idx").on(columns.path),
    _products_v_rels_media_id_idx: index("_products_v_rels_media_id_idx").on(columns.mediaID),
    _products_v_rels_product_sub_categories_id_idx: index(
      "_products_v_rels_product_sub_categories_id_idx",
    ).on(columns.productSubCategoriesID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "_products_v_rels_media_fk",
    }).onDelete("cascade"),
    productSubCategoriesIdFk: foreignKey({
      columns: [columns["productSubCategoriesID"]],
      foreignColumns: [product_sub_categories.id],
      name: "_products_v_rels_product_sub_categories_fk",
    }).onDelete("cascade"),
  }),
);

export const product_categories = pgTable(
  "product_categories",
  {
    id: serial("id").primaryKey(),
    slug: varchar("slug"),
    slugLock: boolean("slug_lock").default(true),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    product_categories_slug_idx: index("product_categories_slug_idx").on(columns.slug),
    product_categories_updated_at_idx: index("product_categories_updated_at_idx").on(columns.updatedAt),
    product_categories_created_at_idx: index("product_categories_created_at_idx").on(columns.createdAt),
  }),
);

export const product_categories_locales = pgTable(
  "product_categories_locales",
  {
    title: varchar("title").notNull(),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("product_categories_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_categories.id],
      name: "product_categories_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_sub_categories = pgTable(
  "product_sub_categories",
  {
    id: serial("id").primaryKey(),
    category: integer("category_id")
      .notNull()
      .references(() => product_categories.id, {
        onDelete: "set null",
      }),
    slug: varchar("slug"),
    slugLock: boolean("slug_lock").default(true),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    product_sub_categories_category_idx: index("product_sub_categories_category_idx").on(columns.category),
    product_sub_categories_slug_idx: index("product_sub_categories_slug_idx").on(columns.slug),
    product_sub_categories_updated_at_idx: index("product_sub_categories_updated_at_idx").on(
      columns.updatedAt,
    ),
    product_sub_categories_created_at_idx: index("product_sub_categories_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const product_sub_categories_locales = pgTable(
  "product_sub_categories_locales",
  {
    title: varchar("title").notNull(),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("product_sub_categories_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_sub_categories.id],
      name: "product_sub_categories_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_reviews = pgTable(
  "product_reviews",
  {
    id: serial("id").primaryKey(),
    product: integer("product_id")
      .notNull()
      .references(() => products.id, {
        onDelete: "set null",
      }),
    author: integer("author_id")
      .notNull()
      .references(() => customers.id, {
        onDelete: "set null",
      }),
    rating: numeric("rating").notNull(),
    review: jsonb("review"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    product_reviews_product_idx: index("product_reviews_product_idx").on(columns.product),
    product_reviews_author_idx: index("product_reviews_author_idx").on(columns.author),
    product_reviews_updated_at_idx: index("product_reviews_updated_at_idx").on(columns.updatedAt),
    product_reviews_created_at_idx: index("product_reviews_created_at_idx").on(columns.createdAt),
  }),
);

export const redirects = pgTable(
  "redirects",
  {
    id: serial("id").primaryKey(),
    from: varchar("from").notNull(),
    to_type: enum_redirects_to_type("to_type").default("reference"),
    to_url: varchar("to_url"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: uniqueIndex("redirects_from_idx").on(columns.from),
    redirects_updated_at_idx: index("redirects_updated_at_idx").on(columns.updatedAt),
    redirects_created_at_idx: index("redirects_created_at_idx").on(columns.createdAt),
  }),
);

export const redirects_rels = pgTable(
  "redirects_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
    postsID: integer("posts_id"),
  },
  (columns) => ({
    order: index("redirects_rels_order_idx").on(columns.order),
    parentIdx: index("redirects_rels_parent_idx").on(columns.parent),
    pathIdx: index("redirects_rels_path_idx").on(columns.path),
    redirects_rels_pages_id_idx: index("redirects_rels_pages_id_idx").on(columns.pagesID),
    redirects_rels_posts_id_idx: index("redirects_rels_posts_id_idx").on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [redirects.id],
      name: "redirects_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "redirects_rels_pages_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "redirects_rels_posts_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_checkbox = pgTable(
  "forms_blocks_checkbox",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    width: numeric("width"),
    required: boolean("required"),
    defaultValue: boolean("default_value"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_checkbox_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_checkbox_parent_id_idx").on(columns._parentID),
    _pathIdx: index("forms_blocks_checkbox_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_checkbox_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_checkbox_locales = pgTable(
  "forms_blocks_checkbox_locales",
  {
    label: varchar("label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_blocks_checkbox_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_checkbox.id],
      name: "forms_blocks_checkbox_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_country = pgTable(
  "forms_blocks_country",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    width: numeric("width"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_country_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_country_parent_id_idx").on(columns._parentID),
    _pathIdx: index("forms_blocks_country_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_country_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_country_locales = pgTable(
  "forms_blocks_country_locales",
  {
    label: varchar("label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_blocks_country_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_country.id],
      name: "forms_blocks_country_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_email = pgTable(
  "forms_blocks_email",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    width: numeric("width"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_email_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_email_parent_id_idx").on(columns._parentID),
    _pathIdx: index("forms_blocks_email_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_email_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_email_locales = pgTable(
  "forms_blocks_email_locales",
  {
    label: varchar("label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_blocks_email_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_email.id],
      name: "forms_blocks_email_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_message = pgTable(
  "forms_blocks_message",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_message_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_message_parent_id_idx").on(columns._parentID),
    _pathIdx: index("forms_blocks_message_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_message_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_message_locales = pgTable(
  "forms_blocks_message_locales",
  {
    message: jsonb("message"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_blocks_message_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_message.id],
      name: "forms_blocks_message_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_number = pgTable(
  "forms_blocks_number",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    width: numeric("width"),
    defaultValue: numeric("default_value"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_number_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_number_parent_id_idx").on(columns._parentID),
    _pathIdx: index("forms_blocks_number_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_number_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_number_locales = pgTable(
  "forms_blocks_number_locales",
  {
    label: varchar("label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_blocks_number_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_number.id],
      name: "forms_blocks_number_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_select_options = pgTable(
  "forms_blocks_select_options",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    value: varchar("value").notNull(),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_select_options_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_select_options_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_select.id],
      name: "forms_blocks_select_options_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_select_options_locales = pgTable(
  "forms_blocks_select_options_locales",
  {
    label: varchar("label").notNull(),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_blocks_select_options_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_select_options.id],
      name: "forms_blocks_select_options_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_select = pgTable(
  "forms_blocks_select",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    width: numeric("width"),
    placeholder: varchar("placeholder"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_select_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_select_parent_id_idx").on(columns._parentID),
    _pathIdx: index("forms_blocks_select_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_select_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_select_locales = pgTable(
  "forms_blocks_select_locales",
  {
    label: varchar("label"),
    defaultValue: varchar("default_value"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_blocks_select_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_select.id],
      name: "forms_blocks_select_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_state = pgTable(
  "forms_blocks_state",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    width: numeric("width"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_state_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_state_parent_id_idx").on(columns._parentID),
    _pathIdx: index("forms_blocks_state_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_state_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_state_locales = pgTable(
  "forms_blocks_state_locales",
  {
    label: varchar("label"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_blocks_state_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_state.id],
      name: "forms_blocks_state_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_text = pgTable(
  "forms_blocks_text",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    width: numeric("width"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_text_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_text_parent_id_idx").on(columns._parentID),
    _pathIdx: index("forms_blocks_text_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_text_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_text_locales = pgTable(
  "forms_blocks_text_locales",
  {
    label: varchar("label"),
    defaultValue: varchar("default_value"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_blocks_text_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_text.id],
      name: "forms_blocks_text_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_textarea = pgTable(
  "forms_blocks_textarea",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    width: numeric("width"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_textarea_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_textarea_parent_id_idx").on(columns._parentID),
    _pathIdx: index("forms_blocks_textarea_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_textarea_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_textarea_locales = pgTable(
  "forms_blocks_textarea_locales",
  {
    label: varchar("label"),
    defaultValue: varchar("default_value"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_blocks_textarea_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_textarea.id],
      name: "forms_blocks_textarea_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_emails = pgTable(
  "forms_emails",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    emailTo: varchar("email_to"),
    cc: varchar("cc"),
    bcc: varchar("bcc"),
    replyTo: varchar("reply_to"),
    emailFrom: varchar("email_from"),
  },
  (columns) => ({
    _orderIdx: index("forms_emails_order_idx").on(columns._order),
    _parentIDIdx: index("forms_emails_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_emails_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_emails_locales = pgTable(
  "forms_emails_locales",
  {
    subject: varchar("subject").notNull().default("You've received a new message."),
    message: jsonb("message"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_emails_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_emails.id],
      name: "forms_emails_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms = pgTable(
  "forms",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    confirmationType: enum_forms_confirmation_type("confirmation_type").default("message"),
    redirect_url: varchar("redirect_url"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index("forms_updated_at_idx").on(columns.updatedAt),
    forms_created_at_idx: index("forms_created_at_idx").on(columns.createdAt),
  }),
);

export const forms_locales = pgTable(
  "forms_locales",
  {
    submitButtonLabel: varchar("submit_button_label"),
    confirmationMessage: jsonb("confirmation_message"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("forms_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const form_submissions_submission_data = pgTable(
  "form_submissions_submission_data",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    field: varchar("field").notNull(),
    value: varchar("value").notNull(),
  },
  (columns) => ({
    _orderIdx: index("form_submissions_submission_data_order_idx").on(columns._order),
    _parentIDIdx: index("form_submissions_submission_data_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [form_submissions.id],
      name: "form_submissions_submission_data_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const form_submissions = pgTable(
  "form_submissions",
  {
    id: serial("id").primaryKey(),
    form: integer("form_id")
      .notNull()
      .references(() => forms.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index("form_submissions_form_idx").on(columns.form),
    form_submissions_updated_at_idx: index("form_submissions_updated_at_idx").on(columns.updatedAt),
    form_submissions_created_at_idx: index("form_submissions_created_at_idx").on(columns.createdAt),
  }),
);

export const search_categories = pgTable(
  "search_categories",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    relationTo: varchar("relation_to"),
    title: varchar("title"),
  },
  (columns) => ({
    _orderIdx: index("search_categories_order_idx").on(columns._order),
    _parentIDIdx: index("search_categories_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [search.id],
      name: "search_categories_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const search = pgTable(
  "search",
  {
    id: serial("id").primaryKey(),
    priority: numeric("priority"),
    slug: varchar("slug"),
    meta_title: varchar("meta_title"),
    meta_description: varchar("meta_description"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index("search_slug_idx").on(columns.slug),
    search_meta_meta_image_idx: index("search_meta_meta_image_idx").on(columns.meta_image),
    search_updated_at_idx: index("search_updated_at_idx").on(columns.updatedAt),
    search_created_at_idx: index("search_created_at_idx").on(columns.createdAt),
  }),
);

export const search_locales = pgTable(
  "search_locales",
  {
    title: varchar("title"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("search_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [search.id],
      name: "search_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const search_rels = pgTable(
  "search_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    postsID: integer("posts_id"),
  },
  (columns) => ({
    order: index("search_rels_order_idx").on(columns.order),
    parentIdx: index("search_rels_parent_idx").on(columns.parent),
    pathIdx: index("search_rels_path_idx").on(columns.path),
    search_rels_posts_id_idx: index("search_rels_posts_id_idx").on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [search.id],
      name: "search_rels_parent_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "search_rels_posts_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_jobs_log = pgTable(
  "payload_jobs_log",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    executedAt: timestamp("executed_at", { mode: "string", withTimezone: true, precision: 3 }).notNull(),
    completedAt: timestamp("completed_at", { mode: "string", withTimezone: true, precision: 3 }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug("task_slug").notNull(),
    taskID: varchar("task_i_d").notNull(),
    input: jsonb("input"),
    output: jsonb("output"),
    state: enum_payload_jobs_log_state("state").notNull(),
    error: jsonb("error"),
  },
  (columns) => ({
    _orderIdx: index("payload_jobs_log_order_idx").on(columns._order),
    _parentIDIdx: index("payload_jobs_log_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [payload_jobs.id],
      name: "payload_jobs_log_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_jobs = pgTable(
  "payload_jobs",
  {
    id: serial("id").primaryKey(),
    input: jsonb("input"),
    completedAt: timestamp("completed_at", { mode: "string", withTimezone: true, precision: 3 }),
    totalTried: numeric("total_tried").default("0"),
    hasError: boolean("has_error").default(false),
    error: jsonb("error"),
    taskSlug: enum_payload_jobs_task_slug("task_slug"),
    queue: varchar("queue").default("default"),
    waitUntil: timestamp("wait_until", { mode: "string", withTimezone: true, precision: 3 }),
    processing: boolean("processing").default(false),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index("payload_jobs_completed_at_idx").on(columns.completedAt),
    payload_jobs_total_tried_idx: index("payload_jobs_total_tried_idx").on(columns.totalTried),
    payload_jobs_has_error_idx: index("payload_jobs_has_error_idx").on(columns.hasError),
    payload_jobs_task_slug_idx: index("payload_jobs_task_slug_idx").on(columns.taskSlug),
    payload_jobs_queue_idx: index("payload_jobs_queue_idx").on(columns.queue),
    payload_jobs_wait_until_idx: index("payload_jobs_wait_until_idx").on(columns.waitUntil),
    payload_jobs_processing_idx: index("payload_jobs_processing_idx").on(columns.processing),
    payload_jobs_updated_at_idx: index("payload_jobs_updated_at_idx").on(columns.updatedAt),
    payload_jobs_created_at_idx: index("payload_jobs_created_at_idx").on(columns.createdAt),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index("payload_locked_documents_global_slug_idx").on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index("payload_locked_documents_updated_at_idx").on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index("payload_locked_documents_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
    postsID: integer("posts_id"),
    mediaID: integer("media_id"),
    categoriesID: integer("categories_id"),
    administratorsID: integer("administrators_id"),
    customersID: integer("customers_id"),
    ordersID: varchar("orders_id"),
    productsID: integer("products_id"),
    productCategoriesID: integer("product_categories_id"),
    productSubCategoriesID: integer("product_sub_categories_id"),
    productReviewsID: integer("product_reviews_id"),
    redirectsID: integer("redirects_id"),
    formsID: integer("forms_id"),
    "form-submissionsID": integer("form_submissions_id"),
    searchID: integer("search_id"),
    "payload-jobsID": integer("payload_jobs_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_pages_id_idx: index("payload_locked_documents_rels_pages_id_idx").on(
      columns.pagesID,
    ),
    payload_locked_documents_rels_posts_id_idx: index("payload_locked_documents_rels_posts_id_idx").on(
      columns.postsID,
    ),
    payload_locked_documents_rels_media_id_idx: index("payload_locked_documents_rels_media_id_idx").on(
      columns.mediaID,
    ),
    payload_locked_documents_rels_categories_id_idx: index(
      "payload_locked_documents_rels_categories_id_idx",
    ).on(columns.categoriesID),
    payload_locked_documents_rels_administrators_id_idx: index(
      "payload_locked_documents_rels_administrators_id_idx",
    ).on(columns.administratorsID),
    payload_locked_documents_rels_customers_id_idx: index(
      "payload_locked_documents_rels_customers_id_idx",
    ).on(columns.customersID),
    payload_locked_documents_rels_orders_id_idx: index("payload_locked_documents_rels_orders_id_idx").on(
      columns.ordersID,
    ),
    payload_locked_documents_rels_products_id_idx: index("payload_locked_documents_rels_products_id_idx").on(
      columns.productsID,
    ),
    payload_locked_documents_rels_product_categories_id_idx: index(
      "payload_locked_documents_rels_product_categories_id_idx",
    ).on(columns.productCategoriesID),
    payload_locked_documents_rels_product_sub_categories_id_idx: index(
      "payload_locked_documents_rels_product_sub_categories_id_idx",
    ).on(columns.productSubCategoriesID),
    payload_locked_documents_rels_product_reviews_id_idx: index(
      "payload_locked_documents_rels_product_reviews_id_idx",
    ).on(columns.productReviewsID),
    payload_locked_documents_rels_redirects_id_idx: index(
      "payload_locked_documents_rels_redirects_id_idx",
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index("payload_locked_documents_rels_forms_id_idx").on(
      columns.formsID,
    ),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      "payload_locked_documents_rels_form_submissions_id_idx",
    ).on(columns["form-submissionsID"]),
    payload_locked_documents_rels_search_id_idx: index("payload_locked_documents_rels_search_id_idx").on(
      columns.searchID,
    ),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      "payload_locked_documents_rels_payload_jobs_id_idx",
    ).on(columns["payload-jobsID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "payload_locked_documents_rels_pages_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "payload_locked_documents_rels_posts_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "payload_locked_documents_rels_categories_fk",
    }).onDelete("cascade"),
    administratorsIdFk: foreignKey({
      columns: [columns["administratorsID"]],
      foreignColumns: [administrators.id],
      name: "payload_locked_documents_rels_administrators_fk",
    }).onDelete("cascade"),
    customersIdFk: foreignKey({
      columns: [columns["customersID"]],
      foreignColumns: [customers.id],
      name: "payload_locked_documents_rels_customers_fk",
    }).onDelete("cascade"),
    ordersIdFk: foreignKey({
      columns: [columns["ordersID"]],
      foreignColumns: [orders.id],
      name: "payload_locked_documents_rels_orders_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "payload_locked_documents_rels_products_fk",
    }).onDelete("cascade"),
    productCategoriesIdFk: foreignKey({
      columns: [columns["productCategoriesID"]],
      foreignColumns: [product_categories.id],
      name: "payload_locked_documents_rels_product_categories_fk",
    }).onDelete("cascade"),
    productSubCategoriesIdFk: foreignKey({
      columns: [columns["productSubCategoriesID"]],
      foreignColumns: [product_sub_categories.id],
      name: "payload_locked_documents_rels_product_sub_categories_fk",
    }).onDelete("cascade"),
    productReviewsIdFk: foreignKey({
      columns: [columns["productReviewsID"]],
      foreignColumns: [product_reviews.id],
      name: "payload_locked_documents_rels_product_reviews_fk",
    }).onDelete("cascade"),
    redirectsIdFk: foreignKey({
      columns: [columns["redirectsID"]],
      foreignColumns: [redirects.id],
      name: "payload_locked_documents_rels_redirects_fk",
    }).onDelete("cascade"),
    formsIdFk: foreignKey({
      columns: [columns["formsID"]],
      foreignColumns: [forms.id],
      name: "payload_locked_documents_rels_forms_fk",
    }).onDelete("cascade"),
    "form-submissionsIdFk": foreignKey({
      columns: [columns["form-submissionsID"]],
      foreignColumns: [form_submissions.id],
      name: "payload_locked_documents_rels_form_submissions_fk",
    }).onDelete("cascade"),
    searchIdFk: foreignKey({
      columns: [columns["searchID"]],
      foreignColumns: [search.id],
      name: "payload_locked_documents_rels_search_fk",
    }).onDelete("cascade"),
    "payload-jobsIdFk": foreignKey({
      columns: [columns["payload-jobsID"]],
      foreignColumns: [payload_jobs.id],
      name: "payload_locked_documents_rels_payload_jobs_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(columns.key),
    payload_preferences_updated_at_idx: index("payload_preferences_updated_at_idx").on(columns.updatedAt),
    payload_preferences_created_at_idx: index("payload_preferences_created_at_idx").on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    administratorsID: integer("administrators_id"),
    customersID: integer("customers_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_administrators_id_idx: index(
      "payload_preferences_rels_administrators_id_idx",
    ).on(columns.administratorsID),
    payload_preferences_rels_customers_id_idx: index("payload_preferences_rels_customers_id_idx").on(
      columns.customersID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    administratorsIdFk: foreignKey({
      columns: [columns["administratorsID"]],
      foreignColumns: [administrators.id],
      name: "payload_preferences_rels_administrators_fk",
    }).onDelete("cascade"),
    customersIdFk: foreignKey({
      columns: [columns["customersID"]],
      foreignColumns: [customers.id],
      name: "payload_preferences_rels_customers_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index("payload_migrations_updated_at_idx").on(columns.updatedAt),
    payload_migrations_created_at_idx: index("payload_migrations_created_at_idx").on(columns.createdAt),
  }),
);

export const header_nav_items = pgTable(
  "header_nav_items",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    link_type: enum_header_nav_items_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
  },
  (columns) => ({
    _orderIdx: index("header_nav_items_order_idx").on(columns._order),
    _parentIDIdx: index("header_nav_items_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [header.id],
      name: "header_nav_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const header_nav_items_locales = pgTable(
  "header_nav_items_locales",
  {
    link_label: varchar("link_label").notNull(),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("header_nav_items_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [header_nav_items.id],
      name: "header_nav_items_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const header = pgTable("header", {
  id: serial("id").primaryKey(),
  type: enum_header_type("type").notNull().default("default"),
  hideOnScroll: boolean("hide_on_scroll").default(false),
  background: varchar("background"),
  updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 }),
  createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
});

export const header_locales = pgTable(
  "header_locales",
  {
    logo: integer("logo_id").references(() => media.id, {
      onDelete: "set null",
    }),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    header_logo_idx: index("header_logo_idx").on(columns.logo, columns._locale),
    _localeParent: uniqueIndex("header_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [header.id],
      name: "header_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const header_rels = pgTable(
  "header_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
    postsID: integer("posts_id"),
  },
  (columns) => ({
    order: index("header_rels_order_idx").on(columns.order),
    parentIdx: index("header_rels_parent_idx").on(columns.parent),
    pathIdx: index("header_rels_path_idx").on(columns.path),
    header_rels_pages_id_idx: index("header_rels_pages_id_idx").on(columns.pagesID),
    header_rels_posts_id_idx: index("header_rels_posts_id_idx").on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [header.id],
      name: "header_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "header_rels_pages_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "header_rels_posts_fk",
    }).onDelete("cascade"),
  }),
);

export const footer_nav_items = pgTable(
  "footer_nav_items",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    link_type: enum_footer_nav_items_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
  },
  (columns) => ({
    _orderIdx: index("footer_nav_items_order_idx").on(columns._order),
    _parentIDIdx: index("footer_nav_items_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [footer.id],
      name: "footer_nav_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const footer_nav_items_locales = pgTable(
  "footer_nav_items_locales",
  {
    link_label: varchar("link_label").notNull(),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: varchar("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("footer_nav_items_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [footer_nav_items.id],
      name: "footer_nav_items_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const footer = pgTable("footer", {
  id: serial("id").primaryKey(),
  updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 }),
  createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
});

export const footer_locales = pgTable(
  "footer_locales",
  {
    attribution: jsonb("attribution"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("footer_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [footer.id],
      name: "footer_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const footer_rels = pgTable(
  "footer_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
    postsID: integer("posts_id"),
  },
  (columns) => ({
    order: index("footer_rels_order_idx").on(columns.order),
    parentIdx: index("footer_rels_parent_idx").on(columns.parent),
    pathIdx: index("footer_rels_path_idx").on(columns.path),
    footer_rels_pages_id_idx: index("footer_rels_pages_id_idx").on(columns.pagesID),
    footer_rels_posts_id_idx: index("footer_rels_posts_id_idx").on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [footer.id],
      name: "footer_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "footer_rels_pages_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "footer_rels_posts_fk",
    }).onDelete("cascade"),
  }),
);

export const email_messages = pgTable(
  "email_messages",
  {
    id: serial("id").primaryKey(),
    smtp_host: varchar("smtp_host").notNull(),
    smtp_port: numeric("smtp_port").notNull(),
    smtp_secure: boolean("smtp_secure").notNull().default(false),
    smtp_user: varchar("smtp_user").notNull(),
    smtp_password: varchar("smtp_password").notNull(),
    smtp_fromEmail: varchar("smtp_from_email").notNull(),
    messages_logo: integer("messages_logo_id").references(() => media.id, {
      onDelete: "set null",
    }),
    messages_additionalText: varchar("messages_additional_text"),
    messages_template: enum_email_messages_messages_template("messages_template")
      .notNull()
      .default("default"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 }),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    email_messages_messages_messages_logo_idx: index("email_messages_messages_messages_logo_idx").on(
      columns.messages_logo,
    ),
  }),
);

export const shop_settings_available_currencies = pgTable(
  "shop_settings_available_currencies",
  {
    order: integer("order").notNull(),
    parent: integer("parent_id").notNull(),
    value: enum_shop_settings_available_currencies("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("shop_settings_available_currencies_order_idx").on(columns.order),
    parentIdx: index("shop_settings_available_currencies_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [shop_settings.id],
      name: "shop_settings_available_currencies_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const shop_settings_currency_values = pgTable(
  "shop_settings_currency_values",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    currency: varchar("currency").notNull(),
    value: numeric("value").notNull(),
  },
  (columns) => ({
    _orderIdx: index("shop_settings_currency_values_order_idx").on(columns._order),
    _parentIDIdx: index("shop_settings_currency_values_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [shop_settings.id],
      name: "shop_settings_currency_values_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const shop_settings = pgTable("shop_settings", {
  id: serial("id").primaryKey(),
  enableOAuth: boolean("enable_o_auth").notNull().default(false),
  updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 }),
  createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
});

export const shop_layout = pgTable("shop_layout", {
  id: serial("id").primaryKey(),
  productDetails_type: enum_shop_layout_product_details_type("product_details_type")
    .notNull()
    .default("WithImageGalleryExpandableDetails"),
  productDetails_reviewsEnabled: boolean("product_details_reviews_enabled").notNull().default(true),
  productList_filters: enum_shop_layout_product_list_filters("product_list_filters").notNull(),
  cartAndWishlist_type: enum_shop_layout_cart_and_wishlist_type("cart_and_wishlist_type")
    .notNull()
    .default("slideOver"),
  checkout_type: enum_shop_layout_checkout_type("checkout_type").notNull().default("OneStepWithSummary"),
  clientPanel_type: enum_shop_layout_client_panel_type("client_panel_type").notNull().default("withSidebar"),
  updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 }),
  createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
});

export const shop_layout_locales = pgTable(
  "shop_layout_locales",
  {
    clientPanel_help_title: varchar("client_panel_help_title").notNull(),
    clientPanel_help_content: jsonb("client_panel_help_content").notNull(),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("shop_layout_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [shop_layout.id],
      name: "shop_layout_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_pickup_delivery_zones_countries = pgTable(
  "inpost_pickup_delivery_zones_countries",
  {
    order: integer("order").notNull(),
    parent: varchar("parent_id").notNull(),
    value: enum_inpost_pickup_delivery_zones_countries("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("inpost_pickup_delivery_zones_countries_order_idx").on(columns.order),
    parentIdx: index("inpost_pickup_delivery_zones_countries_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [inpost_pickup_delivery_zones.id],
      name: "inpost_pickup_delivery_zones_countries_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_pickup_delivery_zones_free_shipping = pgTable(
  "inpost_pickup_delivery_zones_free_shipping",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    value: numeric("value").notNull(),
    currency: varchar("currency").notNull(),
  },
  (columns) => ({
    _orderIdx: index("inpost_pickup_delivery_zones_free_shipping_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_pickup_delivery_zones_free_shipping_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_pickup_delivery_zones.id],
      name: "inpost_pickup_delivery_zones_free_shipping_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_pickup_delivery_zones_range_pricing = pgTable(
  "inpost_pickup_delivery_zones_range_pricing",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    value: numeric("value").notNull(),
    currency: varchar("currency").notNull(),
  },
  (columns) => ({
    _orderIdx: index("inpost_pickup_delivery_zones_range_pricing_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_pickup_delivery_zones_range_pricing_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_pickup_delivery_zones_range.id],
      name: "inpost_pickup_delivery_zones_range_pricing_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_pickup_delivery_zones_range = pgTable(
  "inpost_pickup_delivery_zones_range",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    weightFrom: numeric("weight_from").notNull(),
    weightTo: numeric("weight_to").notNull(),
  },
  (columns) => ({
    _orderIdx: index("inpost_pickup_delivery_zones_range_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_pickup_delivery_zones_range_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_pickup_delivery_zones.id],
      name: "inpost_pickup_delivery_zones_range_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_pickup_delivery_zones = pgTable(
  "inpost_pickup_delivery_zones",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
  },
  (columns) => ({
    _orderIdx: index("inpost_pickup_delivery_zones_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_pickup_delivery_zones_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_pickup.id],
      name: "inpost_pickup_delivery_zones_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_pickup = pgTable(
  "inpost_pickup",
  {
    id: serial("id").primaryKey(),
    enabled: boolean("enabled"),
    icon: integer("icon_id").references(() => media.id, {
      onDelete: "set null",
    }),
    clientId: varchar("client_id"),
    APIUrl: enum_inpost_pickup_a_p_i_url("a_p_i_url").default("https://api-shipx-pl.easypack24.net"),
    shipXAPIKey: varchar("ship_x_a_p_i_key"),
    geowidgetToken: varchar("geowidget_token"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 }),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    inpost_pickup_icon_idx: index("inpost_pickup_icon_idx").on(columns.icon),
  }),
);

export const inpost_pickup_locales = pgTable(
  "inpost_pickup_locales",
  {
    settings_label: varchar("settings_label").notNull(),
    settings_description: varchar("settings_description"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("inpost_pickup_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_pickup.id],
      name: "inpost_pickup_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier_delivery_zones_countries = pgTable(
  "inpost_courier_delivery_zones_countries",
  {
    order: integer("order").notNull(),
    parent: varchar("parent_id").notNull(),
    value: enum_inpost_courier_delivery_zones_countries("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("inpost_courier_delivery_zones_countries_order_idx").on(columns.order),
    parentIdx: index("inpost_courier_delivery_zones_countries_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [inpost_courier_delivery_zones.id],
      name: "inpost_courier_delivery_zones_countries_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier_delivery_zones_free_shipping = pgTable(
  "inpost_courier_delivery_zones_free_shipping",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    value: numeric("value").notNull(),
    currency: varchar("currency").notNull(),
  },
  (columns) => ({
    _orderIdx: index("inpost_courier_delivery_zones_free_shipping_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_courier_delivery_zones_free_shipping_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_courier_delivery_zones.id],
      name: "inpost_courier_delivery_zones_free_shipping_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier_delivery_zones_range_pricing = pgTable(
  "inpost_courier_delivery_zones_range_pricing",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    value: numeric("value").notNull(),
    currency: varchar("currency").notNull(),
  },
  (columns) => ({
    _orderIdx: index("inpost_courier_delivery_zones_range_pricing_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_courier_delivery_zones_range_pricing_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_courier_delivery_zones_range.id],
      name: "inpost_courier_delivery_zones_range_pricing_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier_delivery_zones_range = pgTable(
  "inpost_courier_delivery_zones_range",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    weightFrom: numeric("weight_from").notNull(),
    weightTo: numeric("weight_to").notNull(),
  },
  (columns) => ({
    _orderIdx: index("inpost_courier_delivery_zones_range_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_courier_delivery_zones_range_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_courier_delivery_zones.id],
      name: "inpost_courier_delivery_zones_range_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier_delivery_zones = pgTable(
  "inpost_courier_delivery_zones",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
  },
  (columns) => ({
    _orderIdx: index("inpost_courier_delivery_zones_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_courier_delivery_zones_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_courier.id],
      name: "inpost_courier_delivery_zones_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier = pgTable(
  "inpost_courier",
  {
    id: serial("id").primaryKey(),
    enabled: boolean("enabled"),
    icon: integer("icon_id").references(() => media.id, {
      onDelete: "set null",
    }),
    clientId: varchar("client_id"),
    APIUrl: enum_inpost_courier_a_p_i_url("a_p_i_url").default("https://api-shipx-pl.easypack24.net"),
    shipXAPIKey: varchar("ship_x_a_p_i_key"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 }),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    inpost_courier_icon_idx: index("inpost_courier_icon_idx").on(columns.icon),
  }),
);

export const inpost_courier_locales = pgTable(
  "inpost_courier_locales",
  {
    settings_label: varchar("settings_label").notNull(),
    settings_description: varchar("settings_description"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("inpost_courier_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_courier.id],
      name: "inpost_courier_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier_cod_delivery_zones_countries = pgTable(
  "inpost_courier_cod_delivery_zones_countries",
  {
    order: integer("order").notNull(),
    parent: varchar("parent_id").notNull(),
    value: enum_inpost_courier_cod_delivery_zones_countries("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("inpost_courier_cod_delivery_zones_countries_order_idx").on(columns.order),
    parentIdx: index("inpost_courier_cod_delivery_zones_countries_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [inpost_courier_cod_delivery_zones.id],
      name: "inpost_courier_cod_delivery_zones_countries_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier_cod_delivery_zones_free_shipping = pgTable(
  "inpost_courier_cod_delivery_zones_free_shipping",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    value: numeric("value").notNull(),
    currency: varchar("currency").notNull(),
  },
  (columns) => ({
    _orderIdx: index("inpost_courier_cod_delivery_zones_free_shipping_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_courier_cod_delivery_zones_free_shipping_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_courier_cod_delivery_zones.id],
      name: "inpost_courier_cod_delivery_zones_free_shipping_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier_cod_delivery_zones_range_pricing = pgTable(
  "inpost_courier_cod_delivery_zones_range_pricing",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    value: numeric("value").notNull(),
    currency: varchar("currency").notNull(),
  },
  (columns) => ({
    _orderIdx: index("inpost_courier_cod_delivery_zones_range_pricing_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_courier_cod_delivery_zones_range_pricing_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_courier_cod_delivery_zones_range.id],
      name: "inpost_courier_cod_delivery_zones_range_pricing_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier_cod_delivery_zones_range = pgTable(
  "inpost_courier_cod_delivery_zones_range",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    weightFrom: numeric("weight_from").notNull(),
    weightTo: numeric("weight_to").notNull(),
  },
  (columns) => ({
    _orderIdx: index("inpost_courier_cod_delivery_zones_range_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_courier_cod_delivery_zones_range_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_courier_cod_delivery_zones.id],
      name: "inpost_courier_cod_delivery_zones_range_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier_cod_delivery_zones = pgTable(
  "inpost_courier_cod_delivery_zones",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
  },
  (columns) => ({
    _orderIdx: index("inpost_courier_cod_delivery_zones_order_idx").on(columns._order),
    _parentIDIdx: index("inpost_courier_cod_delivery_zones_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_courier_cod.id],
      name: "inpost_courier_cod_delivery_zones_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const inpost_courier_cod = pgTable(
  "inpost_courier_cod",
  {
    id: serial("id").primaryKey(),
    enabled: boolean("enabled"),
    icon: integer("icon_id").references(() => media.id, {
      onDelete: "set null",
    }),
    clientId: varchar("client_id"),
    APIUrl: enum_inpost_courier_cod_a_p_i_url("a_p_i_url").default("https://api-shipx-pl.easypack24.net"),
    shipXAPIKey: varchar("ship_x_a_p_i_key"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 }),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    inpost_courier_cod_icon_idx: index("inpost_courier_cod_icon_idx").on(columns.icon),
  }),
);

export const inpost_courier_cod_locales = pgTable(
  "inpost_courier_cod_locales",
  {
    settings_label: varchar("settings_label").notNull(),
    settings_description: varchar("settings_description"),
    id: serial("id").primaryKey(),
    _locale: enum__locales("_locale").notNull(),
    _parentID: integer("_parent_id").notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex("inpost_courier_cod_locales_locale_parent_id_unique").on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [inpost_courier_cod.id],
      name: "inpost_courier_cod_locales_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const paywalls = pgTable("paywalls", {
  id: serial("id").primaryKey(),
  paywall: enum_paywalls_paywall("paywall").notNull().default("stripe"),
  stripe_secret: varchar("stripe_secret"),
  stripe_webhookSecret: varchar("stripe_webhook_secret"),
  stripe_public: varchar("stripe_public"),
  autopay_serviceID: varchar("autopay_service_i_d"),
  autopay_hashKey: varchar("autopay_hash_key"),
  autopay_endpoint: varchar("autopay_endpoint"),
  p24_posId: varchar("p24_pos_id"),
  p24_crc: varchar("p24_crc"),
  p24_secretId: varchar("p24_secret_id"),
  p24_endpoint: varchar("p24_endpoint"),
  updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 }),
  createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
});

export const fulfilment = pgTable("fulfilment", {
  id: serial("id").primaryKey(),
  shopAddress_name: varchar("shop_address_name").notNull(),
  shopAddress_address: varchar("shop_address_address").notNull(),
  shopAddress_city: varchar("shop_address_city").notNull(),
  shopAddress_country: enum_fulfilment_shop_address_country("shop_address_country").notNull(),
  shopAddress_region: varchar("shop_address_region").notNull(),
  shopAddress_postalCode: varchar("shop_address_postal_code").notNull(),
  shopAddress_email: varchar("shop_address_email").notNull(),
  shopAddress_phone: varchar("shop_address_phone").notNull(),
  updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 }),
  createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 }),
});

export const relations_pages_hero_links_locales = relations(pages_hero_links_locales, ({ one }) => ({
  _parentID: one(pages_hero_links, {
    fields: [pages_hero_links_locales._parentID],
    references: [pages_hero_links.id],
    relationName: "_locales",
  }),
}));
export const relations_pages_hero_links = relations(pages_hero_links, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_hero_links._parentID],
    references: [pages.id],
    relationName: "hero_links",
  }),
  _locales: many(pages_hero_links_locales, {
    relationName: "_locales",
  }),
}));
export const relations_pages_blocks_cta_links_locales = relations(
  pages_blocks_cta_links_locales,
  ({ one }) => ({
    _parentID: one(pages_blocks_cta_links, {
      fields: [pages_blocks_cta_links_locales._parentID],
      references: [pages_blocks_cta_links.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one, many }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: "links",
  }),
  _locales: many(pages_blocks_cta_links_locales, {
    relationName: "_locales",
  }),
}));
export const relations_pages_blocks_cta_locales = relations(pages_blocks_cta_locales, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_locales._parentID],
    references: [pages_blocks_cta.id],
    relationName: "_locales",
  }),
}));
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: "_blocks_cta",
  }),
  _locales: many(pages_blocks_cta_locales, {
    relationName: "_locales",
  }),
  links: many(pages_blocks_cta_links, {
    relationName: "links",
  }),
}));
export const relations_pages_blocks_content_columns_locales = relations(
  pages_blocks_content_columns_locales,
  ({ one }) => ({
    _parentID: one(pages_blocks_content_columns, {
      fields: [pages_blocks_content_columns_locales._parentID],
      references: [pages_blocks_content_columns.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one, many }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: "columns",
    }),
    _locales: many(pages_blocks_content_columns_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: "_blocks_content",
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: "columns",
  }),
}));
export const relations_pages_blocks_media_block = relations(pages_blocks_media_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_media_block._parentID],
    references: [pages.id],
    relationName: "_blocks_mediaBlock",
  }),
  media: one(media, {
    fields: [pages_blocks_media_block.media],
    references: [media.id],
    relationName: "media",
  }),
}));
export const relations_pages_blocks_archive_locales = relations(pages_blocks_archive_locales, ({ one }) => ({
  _parentID: one(pages_blocks_archive, {
    fields: [pages_blocks_archive_locales._parentID],
    references: [pages_blocks_archive.id],
    relationName: "_locales",
  }),
}));
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_archive._parentID],
    references: [pages.id],
    relationName: "_blocks_archive",
  }),
  _locales: many(pages_blocks_archive_locales, {
    relationName: "_locales",
  }),
}));
export const relations_pages_blocks_form_block_locales = relations(
  pages_blocks_form_block_locales,
  ({ one }) => ({
    _parentID: one(pages_blocks_form_block, {
      fields: [pages_blocks_form_block_locales._parentID],
      references: [pages_blocks_form_block.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_pages_blocks_form_block = relations(pages_blocks_form_block, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form_block._parentID],
    references: [pages.id],
    relationName: "_blocks_formBlock",
  }),
  _locales: many(pages_blocks_form_block_locales, {
    relationName: "_locales",
  }),
  form: one(forms, {
    fields: [pages_blocks_form_block.form],
    references: [forms.id],
    relationName: "form",
  }),
}));
export const relations_pages_blocks_carousel_slides_locales = relations(
  pages_blocks_carousel_slides_locales,
  ({ one }) => ({
    _parentID: one(pages_blocks_carousel_slides, {
      fields: [pages_blocks_carousel_slides_locales._parentID],
      references: [pages_blocks_carousel_slides.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_pages_blocks_carousel_slides = relations(
  pages_blocks_carousel_slides,
  ({ one, many }) => ({
    _parentID: one(pages_blocks_carousel, {
      fields: [pages_blocks_carousel_slides._parentID],
      references: [pages_blocks_carousel.id],
      relationName: "slides",
    }),
    _locales: many(pages_blocks_carousel_slides_locales, {
      relationName: "_locales",
    }),
    image: one(media, {
      fields: [pages_blocks_carousel_slides.image],
      references: [media.id],
      relationName: "image",
    }),
  }),
);
export const relations_pages_blocks_carousel_locales = relations(
  pages_blocks_carousel_locales,
  ({ one }) => ({
    _parentID: one(pages_blocks_carousel, {
      fields: [pages_blocks_carousel_locales._parentID],
      references: [pages_blocks_carousel.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_pages_blocks_carousel = relations(pages_blocks_carousel, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_carousel._parentID],
    references: [pages.id],
    relationName: "_blocks_carousel",
  }),
  _locales: many(pages_blocks_carousel_locales, {
    relationName: "_locales",
  }),
  slides: many(pages_blocks_carousel_slides, {
    relationName: "slides",
  }),
}));
export const relations_pages_blocks_accordion_items_locales = relations(
  pages_blocks_accordion_items_locales,
  ({ one }) => ({
    _parentID: one(pages_blocks_accordion_items, {
      fields: [pages_blocks_accordion_items_locales._parentID],
      references: [pages_blocks_accordion_items.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_pages_blocks_accordion_items = relations(
  pages_blocks_accordion_items,
  ({ one, many }) => ({
    _parentID: one(pages_blocks_accordion, {
      fields: [pages_blocks_accordion_items._parentID],
      references: [pages_blocks_accordion.id],
      relationName: "items",
    }),
    _locales: many(pages_blocks_accordion_items_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations_pages_blocks_accordion_locales = relations(
  pages_blocks_accordion_locales,
  ({ one }) => ({
    _parentID: one(pages_blocks_accordion, {
      fields: [pages_blocks_accordion_locales._parentID],
      references: [pages_blocks_accordion.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_pages_blocks_accordion = relations(pages_blocks_accordion, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_accordion._parentID],
    references: [pages.id],
    relationName: "_blocks_accordion",
  }),
  _locales: many(pages_blocks_accordion_locales, {
    relationName: "_locales",
  }),
  items: many(pages_blocks_accordion_items, {
    relationName: "items",
  }),
}));
export const relations_pages_blocks_hotspot_zone_locales = relations(
  pages_blocks_hotspot_zone_locales,
  ({ one }) => ({
    _parentID: one(pages_blocks_hotspot_zone, {
      fields: [pages_blocks_hotspot_zone_locales._parentID],
      references: [pages_blocks_hotspot_zone.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_pages_blocks_hotspot_zone = relations(pages_blocks_hotspot_zone, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_hotspot_zone._parentID],
    references: [pages.id],
    relationName: "_blocks_hotspotZone",
  }),
  _locales: many(pages_blocks_hotspot_zone_locales, {
    relationName: "_locales",
  }),
  category: one(product_categories, {
    fields: [pages_blocks_hotspot_zone.category],
    references: [product_categories.id],
    relationName: "category",
  }),
  subcategory: one(product_sub_categories, {
    fields: [pages_blocks_hotspot_zone.subcategory],
    references: [product_sub_categories.id],
    relationName: "subcategory",
  }),
}));
export const relations_pages_locales = relations(pages_locales, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_locales._parentID],
    references: [pages.id],
    relationName: "_locales",
  }),
  meta_image: one(media, {
    fields: [pages_locales.meta_image],
    references: [media.id],
    relationName: "meta_image",
  }),
}));
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: "_rels",
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: "pages",
  }),
  postsID: one(posts, {
    fields: [pages_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: "categories",
  }),
  productsID: one(products, {
    fields: [pages_rels.productsID],
    references: [products.id],
    relationName: "products",
  }),
}));
export const relations_pages = relations(pages, ({ one, many }) => ({
  hero_links: many(pages_hero_links, {
    relationName: "hero_links",
  }),
  hero_media: one(media, {
    fields: [pages.hero_media],
    references: [media.id],
    relationName: "hero_media",
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: "_blocks_cta",
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: "_blocks_content",
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: "_blocks_mediaBlock",
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: "_blocks_archive",
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: "_blocks_formBlock",
  }),
  _blocks_carousel: many(pages_blocks_carousel, {
    relationName: "_blocks_carousel",
  }),
  _blocks_accordion: many(pages_blocks_accordion, {
    relationName: "_blocks_accordion",
  }),
  _blocks_hotspotZone: many(pages_blocks_hotspot_zone, {
    relationName: "_blocks_hotspotZone",
  }),
  _locales: many(pages_locales, {
    relationName: "_locales",
  }),
  _rels: many(pages_rels, {
    relationName: "_rels",
  }),
}));
export const relations__pages_v_version_hero_links_locales = relations(
  _pages_v_version_hero_links_locales,
  ({ one }) => ({
    _parentID: one(_pages_v_version_hero_links, {
      fields: [_pages_v_version_hero_links_locales._parentID],
      references: [_pages_v_version_hero_links.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_version_hero_links = relations(
  _pages_v_version_hero_links,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_links._parentID],
      references: [_pages_v.id],
      relationName: "version_hero_links",
    }),
    _locales: many(_pages_v_version_hero_links_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_cta_links_locales = relations(
  _pages_v_blocks_cta_links_locales,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta_links, {
      fields: [_pages_v_blocks_cta_links_locales._parentID],
      references: [_pages_v_blocks_cta_links.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_cta_links = relations(_pages_v_blocks_cta_links, ({ one, many }) => ({
  _parentID: one(_pages_v_blocks_cta, {
    fields: [_pages_v_blocks_cta_links._parentID],
    references: [_pages_v_blocks_cta.id],
    relationName: "links",
  }),
  _locales: many(_pages_v_blocks_cta_links_locales, {
    relationName: "_locales",
  }),
}));
export const relations__pages_v_blocks_cta_locales = relations(_pages_v_blocks_cta_locales, ({ one }) => ({
  _parentID: one(_pages_v_blocks_cta, {
    fields: [_pages_v_blocks_cta_locales._parentID],
    references: [_pages_v_blocks_cta.id],
    relationName: "_locales",
  }),
}));
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: "_blocks_cta",
  }),
  _locales: many(_pages_v_blocks_cta_locales, {
    relationName: "_locales",
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: "links",
  }),
}));
export const relations__pages_v_blocks_content_columns_locales = relations(
  _pages_v_blocks_content_columns_locales,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content_columns, {
      fields: [_pages_v_blocks_content_columns_locales._parentID],
      references: [_pages_v_blocks_content_columns.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one, many }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: "columns",
    }),
    _locales: many(_pages_v_blocks_content_columns_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_content = relations(_pages_v_blocks_content, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_content._parentID],
    references: [_pages_v.id],
    relationName: "_blocks_content",
  }),
  columns: many(_pages_v_blocks_content_columns, {
    relationName: "columns",
  }),
}));
export const relations__pages_v_blocks_media_block = relations(_pages_v_blocks_media_block, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_media_block._parentID],
    references: [_pages_v.id],
    relationName: "_blocks_mediaBlock",
  }),
  media: one(media, {
    fields: [_pages_v_blocks_media_block.media],
    references: [media.id],
    relationName: "media",
  }),
}));
export const relations__pages_v_blocks_archive_locales = relations(
  _pages_v_blocks_archive_locales,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_archive, {
      fields: [_pages_v_blocks_archive_locales._parentID],
      references: [_pages_v_blocks_archive.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_archive._parentID],
    references: [_pages_v.id],
    relationName: "_blocks_archive",
  }),
  _locales: many(_pages_v_blocks_archive_locales, {
    relationName: "_locales",
  }),
}));
export const relations__pages_v_blocks_form_block_locales = relations(
  _pages_v_blocks_form_block_locales,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_form_block, {
      fields: [_pages_v_blocks_form_block_locales._parentID],
      references: [_pages_v_blocks_form_block.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_formBlock",
    }),
    _locales: many(_pages_v_blocks_form_block_locales, {
      relationName: "_locales",
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations__pages_v_blocks_carousel_slides_locales = relations(
  _pages_v_blocks_carousel_slides_locales,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_carousel_slides, {
      fields: [_pages_v_blocks_carousel_slides_locales._parentID],
      references: [_pages_v_blocks_carousel_slides.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_carousel_slides = relations(
  _pages_v_blocks_carousel_slides,
  ({ one, many }) => ({
    _parentID: one(_pages_v_blocks_carousel, {
      fields: [_pages_v_blocks_carousel_slides._parentID],
      references: [_pages_v_blocks_carousel.id],
      relationName: "slides",
    }),
    _locales: many(_pages_v_blocks_carousel_slides_locales, {
      relationName: "_locales",
    }),
    image: one(media, {
      fields: [_pages_v_blocks_carousel_slides.image],
      references: [media.id],
      relationName: "image",
    }),
  }),
);
export const relations__pages_v_blocks_carousel_locales = relations(
  _pages_v_blocks_carousel_locales,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_carousel, {
      fields: [_pages_v_blocks_carousel_locales._parentID],
      references: [_pages_v_blocks_carousel.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_carousel = relations(_pages_v_blocks_carousel, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_carousel._parentID],
    references: [_pages_v.id],
    relationName: "_blocks_carousel",
  }),
  _locales: many(_pages_v_blocks_carousel_locales, {
    relationName: "_locales",
  }),
  slides: many(_pages_v_blocks_carousel_slides, {
    relationName: "slides",
  }),
}));
export const relations__pages_v_blocks_accordion_items_locales = relations(
  _pages_v_blocks_accordion_items_locales,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_accordion_items, {
      fields: [_pages_v_blocks_accordion_items_locales._parentID],
      references: [_pages_v_blocks_accordion_items.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_accordion_items = relations(
  _pages_v_blocks_accordion_items,
  ({ one, many }) => ({
    _parentID: one(_pages_v_blocks_accordion, {
      fields: [_pages_v_blocks_accordion_items._parentID],
      references: [_pages_v_blocks_accordion.id],
      relationName: "items",
    }),
    _locales: many(_pages_v_blocks_accordion_items_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_accordion_locales = relations(
  _pages_v_blocks_accordion_locales,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_accordion, {
      fields: [_pages_v_blocks_accordion_locales._parentID],
      references: [_pages_v_blocks_accordion.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_accordion = relations(_pages_v_blocks_accordion, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_accordion._parentID],
    references: [_pages_v.id],
    relationName: "_blocks_accordion",
  }),
  _locales: many(_pages_v_blocks_accordion_locales, {
    relationName: "_locales",
  }),
  items: many(_pages_v_blocks_accordion_items, {
    relationName: "items",
  }),
}));
export const relations__pages_v_blocks_hotspot_zone_locales = relations(
  _pages_v_blocks_hotspot_zone_locales,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_hotspot_zone, {
      fields: [_pages_v_blocks_hotspot_zone_locales._parentID],
      references: [_pages_v_blocks_hotspot_zone.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__pages_v_blocks_hotspot_zone = relations(
  _pages_v_blocks_hotspot_zone,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_hotspot_zone._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_hotspotZone",
    }),
    _locales: many(_pages_v_blocks_hotspot_zone_locales, {
      relationName: "_locales",
    }),
    category: one(product_categories, {
      fields: [_pages_v_blocks_hotspot_zone.category],
      references: [product_categories.id],
      relationName: "category",
    }),
    subcategory: one(product_sub_categories, {
      fields: [_pages_v_blocks_hotspot_zone.subcategory],
      references: [product_sub_categories.id],
      relationName: "subcategory",
    }),
  }),
);
export const relations__pages_v_locales = relations(_pages_v_locales, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_locales._parentID],
    references: [_pages_v.id],
    relationName: "_locales",
  }),
  version_meta_image: one(media, {
    fields: [_pages_v_locales.version_meta_image],
    references: [media.id],
    relationName: "version_meta_image",
  }),
}));
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: "_rels",
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: "pages",
  }),
  postsID: one(posts, {
    fields: [_pages_v_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: "categories",
  }),
  productsID: one(products, {
    fields: [_pages_v_rels.productsID],
    references: [products.id],
    relationName: "products",
  }),
}));
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: "parent",
  }),
  version_hero_links: many(_pages_v_version_hero_links, {
    relationName: "version_hero_links",
  }),
  version_hero_media: one(media, {
    fields: [_pages_v.version_hero_media],
    references: [media.id],
    relationName: "version_hero_media",
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: "_blocks_cta",
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: "_blocks_content",
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: "_blocks_mediaBlock",
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: "_blocks_archive",
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: "_blocks_formBlock",
  }),
  _blocks_carousel: many(_pages_v_blocks_carousel, {
    relationName: "_blocks_carousel",
  }),
  _blocks_accordion: many(_pages_v_blocks_accordion, {
    relationName: "_blocks_accordion",
  }),
  _blocks_hotspotZone: many(_pages_v_blocks_hotspot_zone, {
    relationName: "_blocks_hotspotZone",
  }),
  _locales: many(_pages_v_locales, {
    relationName: "_locales",
  }),
  _rels: many(_pages_v_rels, {
    relationName: "_rels",
  }),
}));
export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: "populatedAuthors",
  }),
}));
export const relations_posts_locales = relations(posts_locales, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_locales._parentID],
    references: [posts.id],
    relationName: "_locales",
  }),
  meta_image: one(media, {
    fields: [posts_locales.meta_image],
    references: [media.id],
    relationName: "meta_image",
  }),
}));
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: "_rels",
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
  categoriesID: one(categories, {
    fields: [posts_rels.categoriesID],
    references: [categories.id],
    relationName: "categories",
  }),
  administratorsID: one(administrators, {
    fields: [posts_rels.administratorsID],
    references: [administrators.id],
    relationName: "administrators",
  }),
}));
export const relations_posts = relations(posts, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [posts.heroImage],
    references: [media.id],
    relationName: "heroImage",
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: "populatedAuthors",
  }),
  _locales: many(posts_locales, {
    relationName: "_locales",
  }),
  _rels: many(posts_rels, {
    relationName: "_rels",
  }),
}));
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: "version_populatedAuthors",
    }),
  }),
);
export const relations__posts_v_locales = relations(_posts_v_locales, ({ one }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_locales._parentID],
    references: [_posts_v.id],
    relationName: "_locales",
  }),
  version_meta_image: one(media, {
    fields: [_posts_v_locales.version_meta_image],
    references: [media.id],
    relationName: "version_meta_image",
  }),
}));
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: "_rels",
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
  categoriesID: one(categories, {
    fields: [_posts_v_rels.categoriesID],
    references: [categories.id],
    relationName: "categories",
  }),
  administratorsID: one(administrators, {
    fields: [_posts_v_rels.administratorsID],
    references: [administrators.id],
    relationName: "administrators",
  }),
}));
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: "parent",
  }),
  version_heroImage: one(media, {
    fields: [_posts_v.version_heroImage],
    references: [media.id],
    relationName: "version_heroImage",
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: "version_populatedAuthors",
  }),
  _locales: many(_posts_v_locales, {
    relationName: "_locales",
  }),
  _rels: many(_posts_v_rels, {
    relationName: "_rels",
  }),
}));
export const relations_media_locales = relations(media_locales, ({ one }) => ({
  _parentID: one(media, {
    fields: [media_locales._parentID],
    references: [media.id],
    relationName: "_locales",
  }),
}));
export const relations_media = relations(media, ({ many }) => ({
  _locales: many(media_locales, {
    relationName: "_locales",
  }),
}));
export const relations_categories_breadcrumbs = relations(categories_breadcrumbs, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_breadcrumbs._parentID],
    references: [categories.id],
    relationName: "breadcrumbs",
  }),
  doc: one(categories, {
    fields: [categories_breadcrumbs.doc],
    references: [categories.id],
    relationName: "doc",
  }),
}));
export const relations_categories_locales = relations(categories_locales, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_locales._parentID],
    references: [categories.id],
    relationName: "_locales",
  }),
}));
export const relations_categories = relations(categories, ({ one, many }) => ({
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: "parent",
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: "breadcrumbs",
  }),
  _locales: many(categories_locales, {
    relationName: "_locales",
  }),
}));
export const relations_administrators_sessions = relations(administrators_sessions, ({ one }) => ({
  _parentID: one(administrators, {
    fields: [administrators_sessions._parentID],
    references: [administrators.id],
    relationName: "sessions",
  }),
}));
export const relations_administrators = relations(administrators, ({ many }) => ({
  sessions: many(administrators_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_customers_shippings = relations(customers_shippings, ({ one }) => ({
  _parentID: one(customers, {
    fields: [customers_shippings._parentID],
    references: [customers.id],
    relationName: "shippings",
  }),
}));
export const relations_customers_sessions = relations(customers_sessions, ({ one }) => ({
  _parentID: one(customers, {
    fields: [customers_sessions._parentID],
    references: [customers.id],
    relationName: "sessions",
  }),
}));
export const relations_customers = relations(customers, ({ many }) => ({
  shippings: many(customers_shippings, {
    relationName: "shippings",
  }),
  sessions: many(customers_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_orders_products = relations(orders_products, ({ one }) => ({
  _parentID: one(orders, {
    fields: [orders_products._parentID],
    references: [orders.id],
    relationName: "products",
  }),
  product: one(products, {
    fields: [orders_products.product],
    references: [products.id],
    relationName: "product",
  }),
}));
export const relations_orders = relations(orders, ({ one, many }) => ({
  customer: one(customers, {
    fields: [orders.customer],
    references: [customers.id],
    relationName: "customer",
  }),
  products: many(orders_products, {
    relationName: "products",
  }),
}));
export const relations_products_details_locales = relations(products_details_locales, ({ one }) => ({
  _parentID: one(products_details, {
    fields: [products_details_locales._parentID],
    references: [products_details.id],
    relationName: "_locales",
  }),
}));
export const relations_products_details = relations(products_details, ({ one, many }) => ({
  _parentID: one(products, {
    fields: [products_details._parentID],
    references: [products.id],
    relationName: "details",
  }),
  _locales: many(products_details_locales, {
    relationName: "_locales",
  }),
}));
export const relations_products_colors_locales = relations(products_colors_locales, ({ one }) => ({
  _parentID: one(products_colors, {
    fields: [products_colors_locales._parentID],
    references: [products_colors.id],
    relationName: "_locales",
  }),
}));
export const relations_products_colors = relations(products_colors, ({ one, many }) => ({
  _parentID: one(products, {
    fields: [products_colors._parentID],
    references: [products.id],
    relationName: "colors",
  }),
  _locales: many(products_colors_locales, {
    relationName: "_locales",
  }),
}));
export const relations_products_sizes_locales = relations(products_sizes_locales, ({ one }) => ({
  _parentID: one(products_sizes, {
    fields: [products_sizes_locales._parentID],
    references: [products_sizes.id],
    relationName: "_locales",
  }),
}));
export const relations_products_sizes = relations(products_sizes, ({ one, many }) => ({
  _parentID: one(products, {
    fields: [products_sizes._parentID],
    references: [products.id],
    relationName: "sizes",
  }),
  _locales: many(products_sizes_locales, {
    relationName: "_locales",
  }),
}));
export const relations_products_variants_pricing = relations(products_variants_pricing, ({ one }) => ({
  _parentID: one(products_variants, {
    fields: [products_variants_pricing._parentID],
    references: [products_variants.id],
    relationName: "pricing",
  }),
}));
export const relations_products_variants = relations(products_variants, ({ one, many }) => ({
  _parentID: one(products, {
    fields: [products_variants._parentID],
    references: [products.id],
    relationName: "variants",
  }),
  image: one(media, {
    fields: [products_variants.image],
    references: [media.id],
    relationName: "image",
  }),
  pricing: many(products_variants_pricing, {
    relationName: "pricing",
  }),
}));
export const relations_products_categories_arr = relations(products_categories_arr, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_categories_arr._parentID],
    references: [products.id],
    relationName: "categoriesArr",
  }),
  category: one(product_categories, {
    fields: [products_categories_arr.category],
    references: [product_categories.id],
    relationName: "category",
  }),
}));
export const relations_products_pricing = relations(products_pricing, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_pricing._parentID],
    references: [products.id],
    relationName: "pricing",
  }),
}));
export const relations_products_locales = relations(products_locales, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_locales._parentID],
    references: [products.id],
    relationName: "_locales",
  }),
}));
export const relations_products_rels = relations(products_rels, ({ one }) => ({
  parent: one(products, {
    fields: [products_rels.parent],
    references: [products.id],
    relationName: "_rels",
  }),
  mediaID: one(media, {
    fields: [products_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
  productSubCategoriesID: one(product_sub_categories, {
    fields: [products_rels.productSubCategoriesID],
    references: [product_sub_categories.id],
    relationName: "productSubCategories",
  }),
}));
export const relations_products = relations(products, ({ many }) => ({
  details: many(products_details, {
    relationName: "details",
  }),
  colors: many(products_colors, {
    relationName: "colors",
  }),
  sizes: many(products_sizes, {
    relationName: "sizes",
  }),
  variants: many(products_variants, {
    relationName: "variants",
  }),
  categoriesArr: many(products_categories_arr, {
    relationName: "categoriesArr",
  }),
  pricing: many(products_pricing, {
    relationName: "pricing",
  }),
  _locales: many(products_locales, {
    relationName: "_locales",
  }),
  _rels: many(products_rels, {
    relationName: "_rels",
  }),
}));
export const relations__products_v_version_details_locales = relations(
  _products_v_version_details_locales,
  ({ one }) => ({
    _parentID: one(_products_v_version_details, {
      fields: [_products_v_version_details_locales._parentID],
      references: [_products_v_version_details.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__products_v_version_details = relations(
  _products_v_version_details,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_details._parentID],
      references: [_products_v.id],
      relationName: "version_details",
    }),
    _locales: many(_products_v_version_details_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations__products_v_version_colors_locales = relations(
  _products_v_version_colors_locales,
  ({ one }) => ({
    _parentID: one(_products_v_version_colors, {
      fields: [_products_v_version_colors_locales._parentID],
      references: [_products_v_version_colors.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__products_v_version_colors = relations(
  _products_v_version_colors,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_colors._parentID],
      references: [_products_v.id],
      relationName: "version_colors",
    }),
    _locales: many(_products_v_version_colors_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations__products_v_version_sizes_locales = relations(
  _products_v_version_sizes_locales,
  ({ one }) => ({
    _parentID: one(_products_v_version_sizes, {
      fields: [_products_v_version_sizes_locales._parentID],
      references: [_products_v_version_sizes.id],
      relationName: "_locales",
    }),
  }),
);
export const relations__products_v_version_sizes = relations(_products_v_version_sizes, ({ one, many }) => ({
  _parentID: one(_products_v, {
    fields: [_products_v_version_sizes._parentID],
    references: [_products_v.id],
    relationName: "version_sizes",
  }),
  _locales: many(_products_v_version_sizes_locales, {
    relationName: "_locales",
  }),
}));
export const relations__products_v_version_variants_pricing = relations(
  _products_v_version_variants_pricing,
  ({ one }) => ({
    _parentID: one(_products_v_version_variants, {
      fields: [_products_v_version_variants_pricing._parentID],
      references: [_products_v_version_variants.id],
      relationName: "pricing",
    }),
  }),
);
export const relations__products_v_version_variants = relations(
  _products_v_version_variants,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_variants._parentID],
      references: [_products_v.id],
      relationName: "version_variants",
    }),
    image: one(media, {
      fields: [_products_v_version_variants.image],
      references: [media.id],
      relationName: "image",
    }),
    pricing: many(_products_v_version_variants_pricing, {
      relationName: "pricing",
    }),
  }),
);
export const relations__products_v_version_categories_arr = relations(
  _products_v_version_categories_arr,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_categories_arr._parentID],
      references: [_products_v.id],
      relationName: "version_categoriesArr",
    }),
    category: one(product_categories, {
      fields: [_products_v_version_categories_arr.category],
      references: [product_categories.id],
      relationName: "category",
    }),
  }),
);
export const relations__products_v_version_pricing = relations(_products_v_version_pricing, ({ one }) => ({
  _parentID: one(_products_v, {
    fields: [_products_v_version_pricing._parentID],
    references: [_products_v.id],
    relationName: "version_pricing",
  }),
}));
export const relations__products_v_locales = relations(_products_v_locales, ({ one }) => ({
  _parentID: one(_products_v, {
    fields: [_products_v_locales._parentID],
    references: [_products_v.id],
    relationName: "_locales",
  }),
}));
export const relations__products_v_rels = relations(_products_v_rels, ({ one }) => ({
  parent: one(_products_v, {
    fields: [_products_v_rels.parent],
    references: [_products_v.id],
    relationName: "_rels",
  }),
  mediaID: one(media, {
    fields: [_products_v_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
  productSubCategoriesID: one(product_sub_categories, {
    fields: [_products_v_rels.productSubCategoriesID],
    references: [product_sub_categories.id],
    relationName: "productSubCategories",
  }),
}));
export const relations__products_v = relations(_products_v, ({ one, many }) => ({
  parent: one(products, {
    fields: [_products_v.parent],
    references: [products.id],
    relationName: "parent",
  }),
  version_details: many(_products_v_version_details, {
    relationName: "version_details",
  }),
  version_colors: many(_products_v_version_colors, {
    relationName: "version_colors",
  }),
  version_sizes: many(_products_v_version_sizes, {
    relationName: "version_sizes",
  }),
  version_variants: many(_products_v_version_variants, {
    relationName: "version_variants",
  }),
  version_categoriesArr: many(_products_v_version_categories_arr, {
    relationName: "version_categoriesArr",
  }),
  version_pricing: many(_products_v_version_pricing, {
    relationName: "version_pricing",
  }),
  _locales: many(_products_v_locales, {
    relationName: "_locales",
  }),
  _rels: many(_products_v_rels, {
    relationName: "_rels",
  }),
}));
export const relations_product_categories_locales = relations(product_categories_locales, ({ one }) => ({
  _parentID: one(product_categories, {
    fields: [product_categories_locales._parentID],
    references: [product_categories.id],
    relationName: "_locales",
  }),
}));
export const relations_product_categories = relations(product_categories, ({ many }) => ({
  _locales: many(product_categories_locales, {
    relationName: "_locales",
  }),
}));
export const relations_product_sub_categories_locales = relations(
  product_sub_categories_locales,
  ({ one }) => ({
    _parentID: one(product_sub_categories, {
      fields: [product_sub_categories_locales._parentID],
      references: [product_sub_categories.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_product_sub_categories = relations(product_sub_categories, ({ one, many }) => ({
  category: one(product_categories, {
    fields: [product_sub_categories.category],
    references: [product_categories.id],
    relationName: "category",
  }),
  _locales: many(product_sub_categories_locales, {
    relationName: "_locales",
  }),
}));
export const relations_product_reviews = relations(product_reviews, ({ one }) => ({
  product: one(products, {
    fields: [product_reviews.product],
    references: [products.id],
    relationName: "product",
  }),
  author: one(customers, {
    fields: [product_reviews.author],
    references: [customers.id],
    relationName: "author",
  }),
}));
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: "_rels",
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: "pages",
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
}));
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: "_rels",
  }),
}));
export const relations_forms_blocks_checkbox_locales = relations(
  forms_blocks_checkbox_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_checkbox, {
      fields: [forms_blocks_checkbox_locales._parentID],
      references: [forms_blocks_checkbox.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: "_blocks_checkbox",
  }),
  _locales: many(forms_blocks_checkbox_locales, {
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_country_locales = relations(forms_blocks_country_locales, ({ one }) => ({
  _parentID: one(forms_blocks_country, {
    fields: [forms_blocks_country_locales._parentID],
    references: [forms_blocks_country.id],
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: "_blocks_country",
  }),
  _locales: many(forms_blocks_country_locales, {
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_email_locales = relations(forms_blocks_email_locales, ({ one }) => ({
  _parentID: one(forms_blocks_email, {
    fields: [forms_blocks_email_locales._parentID],
    references: [forms_blocks_email.id],
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: "_blocks_email",
  }),
  _locales: many(forms_blocks_email_locales, {
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_message_locales = relations(forms_blocks_message_locales, ({ one }) => ({
  _parentID: one(forms_blocks_message, {
    fields: [forms_blocks_message_locales._parentID],
    references: [forms_blocks_message.id],
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: "_blocks_message",
  }),
  _locales: many(forms_blocks_message_locales, {
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_number_locales = relations(forms_blocks_number_locales, ({ one }) => ({
  _parentID: one(forms_blocks_number, {
    fields: [forms_blocks_number_locales._parentID],
    references: [forms_blocks_number.id],
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: "_blocks_number",
  }),
  _locales: many(forms_blocks_number_locales, {
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_select_options_locales = relations(
  forms_blocks_select_options_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_select_options, {
      fields: [forms_blocks_select_options_locales._parentID],
      references: [forms_blocks_select_options.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one, many }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: "options",
    }),
    _locales: many(forms_blocks_select_options_locales, {
      relationName: "_locales",
    }),
  }),
);
export const relations_forms_blocks_select_locales = relations(forms_blocks_select_locales, ({ one }) => ({
  _parentID: one(forms_blocks_select, {
    fields: [forms_blocks_select_locales._parentID],
    references: [forms_blocks_select.id],
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: "_blocks_select",
  }),
  _locales: many(forms_blocks_select_locales, {
    relationName: "_locales",
  }),
  options: many(forms_blocks_select_options, {
    relationName: "options",
  }),
}));
export const relations_forms_blocks_state_locales = relations(forms_blocks_state_locales, ({ one }) => ({
  _parentID: one(forms_blocks_state, {
    fields: [forms_blocks_state_locales._parentID],
    references: [forms_blocks_state.id],
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: "_blocks_state",
  }),
  _locales: many(forms_blocks_state_locales, {
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_text_locales = relations(forms_blocks_text_locales, ({ one }) => ({
  _parentID: one(forms_blocks_text, {
    fields: [forms_blocks_text_locales._parentID],
    references: [forms_blocks_text.id],
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: "_blocks_text",
  }),
  _locales: many(forms_blocks_text_locales, {
    relationName: "_locales",
  }),
}));
export const relations_forms_blocks_textarea_locales = relations(
  forms_blocks_textarea_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_textarea, {
      fields: [forms_blocks_textarea_locales._parentID],
      references: [forms_blocks_textarea.id],
      relationName: "_locales",
    }),
  }),
);
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: "_blocks_textarea",
  }),
  _locales: many(forms_blocks_textarea_locales, {
    relationName: "_locales",
  }),
}));
export const relations_forms_emails_locales = relations(forms_emails_locales, ({ one }) => ({
  _parentID: one(forms_emails, {
    fields: [forms_emails_locales._parentID],
    references: [forms_emails.id],
    relationName: "_locales",
  }),
}));
export const relations_forms_emails = relations(forms_emails, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: "emails",
  }),
  _locales: many(forms_emails_locales, {
    relationName: "_locales",
  }),
}));
export const relations_forms_locales = relations(forms_locales, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_locales._parentID],
    references: [forms.id],
    relationName: "_locales",
  }),
}));
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: "_blocks_checkbox",
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: "_blocks_country",
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: "_blocks_email",
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: "_blocks_message",
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: "_blocks_number",
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: "_blocks_select",
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: "_blocks_state",
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: "_blocks_text",
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: "_blocks_textarea",
  }),
  emails: many(forms_emails, {
    relationName: "emails",
  }),
  _locales: many(forms_locales, {
    relationName: "_locales",
  }),
}));
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: "submissionData",
    }),
  }),
);
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: "form",
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: "submissionData",
  }),
}));
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: "categories",
  }),
}));
export const relations_search_locales = relations(search_locales, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_locales._parentID],
    references: [search.id],
    relationName: "_locales",
  }),
}));
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: "_rels",
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
}));
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: "meta_image",
  }),
  categories: many(search_categories, {
    relationName: "categories",
  }),
  _locales: many(search_locales, {
    relationName: "_locales",
  }),
  _rels: many(search_rels, {
    relationName: "_rels",
  }),
}));
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: "log",
  }),
}));
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: "log",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: "pages",
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: "posts",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: "categories",
    }),
    administratorsID: one(administrators, {
      fields: [payload_locked_documents_rels.administratorsID],
      references: [administrators.id],
      relationName: "administrators",
    }),
    customersID: one(customers, {
      fields: [payload_locked_documents_rels.customersID],
      references: [customers.id],
      relationName: "customers",
    }),
    ordersID: one(orders, {
      fields: [payload_locked_documents_rels.ordersID],
      references: [orders.id],
      relationName: "orders",
    }),
    productsID: one(products, {
      fields: [payload_locked_documents_rels.productsID],
      references: [products.id],
      relationName: "products",
    }),
    productCategoriesID: one(product_categories, {
      fields: [payload_locked_documents_rels.productCategoriesID],
      references: [product_categories.id],
      relationName: "productCategories",
    }),
    productSubCategoriesID: one(product_sub_categories, {
      fields: [payload_locked_documents_rels.productSubCategoriesID],
      references: [product_sub_categories.id],
      relationName: "productSubCategories",
    }),
    productReviewsID: one(product_reviews, {
      fields: [payload_locked_documents_rels.productReviewsID],
      references: [product_reviews.id],
      relationName: "productReviews",
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: "redirects",
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: "forms",
    }),
    "form-submissionsID": one(form_submissions, {
      fields: [payload_locked_documents_rels["form-submissionsID"]],
      references: [form_submissions.id],
      relationName: "form-submissions",
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: "search",
    }),
    "payload-jobsID": one(payload_jobs, {
      fields: [payload_locked_documents_rels["payload-jobsID"]],
      references: [payload_jobs.id],
      relationName: "payload-jobs",
    }),
  }),
);
export const relations_payload_locked_documents = relations(payload_locked_documents, ({ many }) => ({
  _rels: many(payload_locked_documents_rels, {
    relationName: "_rels",
  }),
}));
export const relations_payload_preferences_rels = relations(payload_preferences_rels, ({ one }) => ({
  parent: one(payload_preferences, {
    fields: [payload_preferences_rels.parent],
    references: [payload_preferences.id],
    relationName: "_rels",
  }),
  administratorsID: one(administrators, {
    fields: [payload_preferences_rels.administratorsID],
    references: [administrators.id],
    relationName: "administrators",
  }),
  customersID: one(customers, {
    fields: [payload_preferences_rels.customersID],
    references: [customers.id],
    relationName: "customers",
  }),
}));
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: "_rels",
  }),
}));
export const relations_payload_migrations = relations(payload_migrations, () => ({}));
export const relations_header_nav_items_locales = relations(header_nav_items_locales, ({ one }) => ({
  _parentID: one(header_nav_items, {
    fields: [header_nav_items_locales._parentID],
    references: [header_nav_items.id],
    relationName: "_locales",
  }),
}));
export const relations_header_nav_items = relations(header_nav_items, ({ one, many }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: "navItems",
  }),
  _locales: many(header_nav_items_locales, {
    relationName: "_locales",
  }),
}));
export const relations_header_locales = relations(header_locales, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_locales._parentID],
    references: [header.id],
    relationName: "_locales",
  }),
  logo: one(media, {
    fields: [header_locales.logo],
    references: [media.id],
    relationName: "logo",
  }),
}));
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: "_rels",
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: "pages",
  }),
  postsID: one(posts, {
    fields: [header_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
}));
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: "navItems",
  }),
  _locales: many(header_locales, {
    relationName: "_locales",
  }),
  _rels: many(header_rels, {
    relationName: "_rels",
  }),
}));
export const relations_footer_nav_items_locales = relations(footer_nav_items_locales, ({ one }) => ({
  _parentID: one(footer_nav_items, {
    fields: [footer_nav_items_locales._parentID],
    references: [footer_nav_items.id],
    relationName: "_locales",
  }),
}));
export const relations_footer_nav_items = relations(footer_nav_items, ({ one, many }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: "navItems",
  }),
  _locales: many(footer_nav_items_locales, {
    relationName: "_locales",
  }),
}));
export const relations_footer_locales = relations(footer_locales, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_locales._parentID],
    references: [footer.id],
    relationName: "_locales",
  }),
}));
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: "_rels",
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: "pages",
  }),
  postsID: one(posts, {
    fields: [footer_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
}));
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: "navItems",
  }),
  _locales: many(footer_locales, {
    relationName: "_locales",
  }),
  _rels: many(footer_rels, {
    relationName: "_rels",
  }),
}));
export const relations_email_messages = relations(email_messages, ({ one }) => ({
  messages_logo: one(media, {
    fields: [email_messages.messages_logo],
    references: [media.id],
    relationName: "messages_logo",
  }),
}));
export const relations_shop_settings_available_currencies = relations(
  shop_settings_available_currencies,
  ({ one }) => ({
    parent: one(shop_settings, {
      fields: [shop_settings_available_currencies.parent],
      references: [shop_settings.id],
      relationName: "availableCurrencies",
    }),
  }),
);
export const relations_shop_settings_currency_values = relations(
  shop_settings_currency_values,
  ({ one }) => ({
    _parentID: one(shop_settings, {
      fields: [shop_settings_currency_values._parentID],
      references: [shop_settings.id],
      relationName: "currencyValues",
    }),
  }),
);
export const relations_shop_settings = relations(shop_settings, ({ many }) => ({
  availableCurrencies: many(shop_settings_available_currencies, {
    relationName: "availableCurrencies",
  }),
  currencyValues: many(shop_settings_currency_values, {
    relationName: "currencyValues",
  }),
}));
export const relations_shop_layout_locales = relations(shop_layout_locales, ({ one }) => ({
  _parentID: one(shop_layout, {
    fields: [shop_layout_locales._parentID],
    references: [shop_layout.id],
    relationName: "_locales",
  }),
}));
export const relations_shop_layout = relations(shop_layout, ({ many }) => ({
  _locales: many(shop_layout_locales, {
    relationName: "_locales",
  }),
}));
export const relations_inpost_pickup_delivery_zones_countries = relations(
  inpost_pickup_delivery_zones_countries,
  ({ one }) => ({
    parent: one(inpost_pickup_delivery_zones, {
      fields: [inpost_pickup_delivery_zones_countries.parent],
      references: [inpost_pickup_delivery_zones.id],
      relationName: "countries",
    }),
  }),
);
export const relations_inpost_pickup_delivery_zones_free_shipping = relations(
  inpost_pickup_delivery_zones_free_shipping,
  ({ one }) => ({
    _parentID: one(inpost_pickup_delivery_zones, {
      fields: [inpost_pickup_delivery_zones_free_shipping._parentID],
      references: [inpost_pickup_delivery_zones.id],
      relationName: "freeShipping",
    }),
  }),
);
export const relations_inpost_pickup_delivery_zones_range_pricing = relations(
  inpost_pickup_delivery_zones_range_pricing,
  ({ one }) => ({
    _parentID: one(inpost_pickup_delivery_zones_range, {
      fields: [inpost_pickup_delivery_zones_range_pricing._parentID],
      references: [inpost_pickup_delivery_zones_range.id],
      relationName: "pricing",
    }),
  }),
);
export const relations_inpost_pickup_delivery_zones_range = relations(
  inpost_pickup_delivery_zones_range,
  ({ one, many }) => ({
    _parentID: one(inpost_pickup_delivery_zones, {
      fields: [inpost_pickup_delivery_zones_range._parentID],
      references: [inpost_pickup_delivery_zones.id],
      relationName: "range",
    }),
    pricing: many(inpost_pickup_delivery_zones_range_pricing, {
      relationName: "pricing",
    }),
  }),
);
export const relations_inpost_pickup_delivery_zones = relations(
  inpost_pickup_delivery_zones,
  ({ one, many }) => ({
    _parentID: one(inpost_pickup, {
      fields: [inpost_pickup_delivery_zones._parentID],
      references: [inpost_pickup.id],
      relationName: "deliveryZones",
    }),
    countries: many(inpost_pickup_delivery_zones_countries, {
      relationName: "countries",
    }),
    freeShipping: many(inpost_pickup_delivery_zones_free_shipping, {
      relationName: "freeShipping",
    }),
    range: many(inpost_pickup_delivery_zones_range, {
      relationName: "range",
    }),
  }),
);
export const relations_inpost_pickup_locales = relations(inpost_pickup_locales, ({ one }) => ({
  _parentID: one(inpost_pickup, {
    fields: [inpost_pickup_locales._parentID],
    references: [inpost_pickup.id],
    relationName: "_locales",
  }),
}));
export const relations_inpost_pickup = relations(inpost_pickup, ({ one, many }) => ({
  deliveryZones: many(inpost_pickup_delivery_zones, {
    relationName: "deliveryZones",
  }),
  icon: one(media, {
    fields: [inpost_pickup.icon],
    references: [media.id],
    relationName: "icon",
  }),
  _locales: many(inpost_pickup_locales, {
    relationName: "_locales",
  }),
}));
export const relations_inpost_courier_delivery_zones_countries = relations(
  inpost_courier_delivery_zones_countries,
  ({ one }) => ({
    parent: one(inpost_courier_delivery_zones, {
      fields: [inpost_courier_delivery_zones_countries.parent],
      references: [inpost_courier_delivery_zones.id],
      relationName: "countries",
    }),
  }),
);
export const relations_inpost_courier_delivery_zones_free_shipping = relations(
  inpost_courier_delivery_zones_free_shipping,
  ({ one }) => ({
    _parentID: one(inpost_courier_delivery_zones, {
      fields: [inpost_courier_delivery_zones_free_shipping._parentID],
      references: [inpost_courier_delivery_zones.id],
      relationName: "freeShipping",
    }),
  }),
);
export const relations_inpost_courier_delivery_zones_range_pricing = relations(
  inpost_courier_delivery_zones_range_pricing,
  ({ one }) => ({
    _parentID: one(inpost_courier_delivery_zones_range, {
      fields: [inpost_courier_delivery_zones_range_pricing._parentID],
      references: [inpost_courier_delivery_zones_range.id],
      relationName: "pricing",
    }),
  }),
);
export const relations_inpost_courier_delivery_zones_range = relations(
  inpost_courier_delivery_zones_range,
  ({ one, many }) => ({
    _parentID: one(inpost_courier_delivery_zones, {
      fields: [inpost_courier_delivery_zones_range._parentID],
      references: [inpost_courier_delivery_zones.id],
      relationName: "range",
    }),
    pricing: many(inpost_courier_delivery_zones_range_pricing, {
      relationName: "pricing",
    }),
  }),
);
export const relations_inpost_courier_delivery_zones = relations(
  inpost_courier_delivery_zones,
  ({ one, many }) => ({
    _parentID: one(inpost_courier, {
      fields: [inpost_courier_delivery_zones._parentID],
      references: [inpost_courier.id],
      relationName: "deliveryZones",
    }),
    countries: many(inpost_courier_delivery_zones_countries, {
      relationName: "countries",
    }),
    freeShipping: many(inpost_courier_delivery_zones_free_shipping, {
      relationName: "freeShipping",
    }),
    range: many(inpost_courier_delivery_zones_range, {
      relationName: "range",
    }),
  }),
);
export const relations_inpost_courier_locales = relations(inpost_courier_locales, ({ one }) => ({
  _parentID: one(inpost_courier, {
    fields: [inpost_courier_locales._parentID],
    references: [inpost_courier.id],
    relationName: "_locales",
  }),
}));
export const relations_inpost_courier = relations(inpost_courier, ({ one, many }) => ({
  deliveryZones: many(inpost_courier_delivery_zones, {
    relationName: "deliveryZones",
  }),
  icon: one(media, {
    fields: [inpost_courier.icon],
    references: [media.id],
    relationName: "icon",
  }),
  _locales: many(inpost_courier_locales, {
    relationName: "_locales",
  }),
}));
export const relations_inpost_courier_cod_delivery_zones_countries = relations(
  inpost_courier_cod_delivery_zones_countries,
  ({ one }) => ({
    parent: one(inpost_courier_cod_delivery_zones, {
      fields: [inpost_courier_cod_delivery_zones_countries.parent],
      references: [inpost_courier_cod_delivery_zones.id],
      relationName: "countries",
    }),
  }),
);
export const relations_inpost_courier_cod_delivery_zones_free_shipping = relations(
  inpost_courier_cod_delivery_zones_free_shipping,
  ({ one }) => ({
    _parentID: one(inpost_courier_cod_delivery_zones, {
      fields: [inpost_courier_cod_delivery_zones_free_shipping._parentID],
      references: [inpost_courier_cod_delivery_zones.id],
      relationName: "freeShipping",
    }),
  }),
);
export const relations_inpost_courier_cod_delivery_zones_range_pricing = relations(
  inpost_courier_cod_delivery_zones_range_pricing,
  ({ one }) => ({
    _parentID: one(inpost_courier_cod_delivery_zones_range, {
      fields: [inpost_courier_cod_delivery_zones_range_pricing._parentID],
      references: [inpost_courier_cod_delivery_zones_range.id],
      relationName: "pricing",
    }),
  }),
);
export const relations_inpost_courier_cod_delivery_zones_range = relations(
  inpost_courier_cod_delivery_zones_range,
  ({ one, many }) => ({
    _parentID: one(inpost_courier_cod_delivery_zones, {
      fields: [inpost_courier_cod_delivery_zones_range._parentID],
      references: [inpost_courier_cod_delivery_zones.id],
      relationName: "range",
    }),
    pricing: many(inpost_courier_cod_delivery_zones_range_pricing, {
      relationName: "pricing",
    }),
  }),
);
export const relations_inpost_courier_cod_delivery_zones = relations(
  inpost_courier_cod_delivery_zones,
  ({ one, many }) => ({
    _parentID: one(inpost_courier_cod, {
      fields: [inpost_courier_cod_delivery_zones._parentID],
      references: [inpost_courier_cod.id],
      relationName: "deliveryZones",
    }),
    countries: many(inpost_courier_cod_delivery_zones_countries, {
      relationName: "countries",
    }),
    freeShipping: many(inpost_courier_cod_delivery_zones_free_shipping, {
      relationName: "freeShipping",
    }),
    range: many(inpost_courier_cod_delivery_zones_range, {
      relationName: "range",
    }),
  }),
);
export const relations_inpost_courier_cod_locales = relations(inpost_courier_cod_locales, ({ one }) => ({
  _parentID: one(inpost_courier_cod, {
    fields: [inpost_courier_cod_locales._parentID],
    references: [inpost_courier_cod.id],
    relationName: "_locales",
  }),
}));
export const relations_inpost_courier_cod = relations(inpost_courier_cod, ({ one, many }) => ({
  deliveryZones: many(inpost_courier_cod_delivery_zones, {
    relationName: "deliveryZones",
  }),
  icon: one(media, {
    fields: [inpost_courier_cod.icon],
    references: [media.id],
    relationName: "icon",
  }),
  _locales: many(inpost_courier_cod_locales, {
    relationName: "_locales",
  }),
}));
export const relations_paywalls = relations(paywalls, () => ({}));
export const relations_fulfilment = relations(fulfilment, () => ({}));

type DatabaseSchema = {
  enum__locales: typeof enum__locales;
  enum_pages_hero_links_link_type: typeof enum_pages_hero_links_link_type;
  enum_pages_hero_links_link_appearance: typeof enum_pages_hero_links_link_appearance;
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type;
  enum_pages_blocks_cta_links_link_appearance: typeof enum_pages_blocks_cta_links_link_appearance;
  enum_pages_blocks_cta_spacing_bottom: typeof enum_pages_blocks_cta_spacing_bottom;
  enum_pages_blocks_cta_spacing_top: typeof enum_pages_blocks_cta_spacing_top;
  enum_pages_blocks_cta_padding_bottom: typeof enum_pages_blocks_cta_padding_bottom;
  enum_pages_blocks_cta_padding_top: typeof enum_pages_blocks_cta_padding_top;
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size;
  enum_pages_blocks_content_columns_padding_bottom: typeof enum_pages_blocks_content_columns_padding_bottom;
  enum_pages_blocks_content_columns_padding_top: typeof enum_pages_blocks_content_columns_padding_top;
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type;
  enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance;
  enum_pages_blocks_content_alignment: typeof enum_pages_blocks_content_alignment;
  enum_pages_blocks_content_spacing_bottom: typeof enum_pages_blocks_content_spacing_bottom;
  enum_pages_blocks_content_spacing_top: typeof enum_pages_blocks_content_spacing_top;
  enum_pages_blocks_content_padding_bottom: typeof enum_pages_blocks_content_padding_bottom;
  enum_pages_blocks_content_padding_top: typeof enum_pages_blocks_content_padding_top;
  enum_pages_blocks_content_radius_all: typeof enum_pages_blocks_content_radius_all;
  enum_pages_blocks_content_radius_top_left: typeof enum_pages_blocks_content_radius_top_left;
  enum_pages_blocks_content_radius_top_right: typeof enum_pages_blocks_content_radius_top_right;
  enum_pages_blocks_content_radius_bottom_left: typeof enum_pages_blocks_content_radius_bottom_left;
  enum_pages_blocks_content_radius_bottom_right: typeof enum_pages_blocks_content_radius_bottom_right;
  enum_pages_blocks_media_block_spacing_bottom: typeof enum_pages_blocks_media_block_spacing_bottom;
  enum_pages_blocks_media_block_spacing_top: typeof enum_pages_blocks_media_block_spacing_top;
  enum_pages_blocks_media_block_padding_bottom: typeof enum_pages_blocks_media_block_padding_bottom;
  enum_pages_blocks_media_block_padding_top: typeof enum_pages_blocks_media_block_padding_top;
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by;
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to;
  enum_pages_blocks_carousel_slides_link_type: typeof enum_pages_blocks_carousel_slides_link_type;
  enum_pages_blocks_carousel_slides_link_appearance: typeof enum_pages_blocks_carousel_slides_link_appearance;
  enum_pages_blocks_carousel_type: typeof enum_pages_blocks_carousel_type;
  enum_pages_blocks_carousel_spacing_bottom: typeof enum_pages_blocks_carousel_spacing_bottom;
  enum_pages_blocks_carousel_spacing_top: typeof enum_pages_blocks_carousel_spacing_top;
  enum_pages_blocks_carousel_padding_bottom: typeof enum_pages_blocks_carousel_padding_bottom;
  enum_pages_blocks_carousel_padding_top: typeof enum_pages_blocks_carousel_padding_top;
  enum_pages_blocks_accordion_spacing_bottom: typeof enum_pages_blocks_accordion_spacing_bottom;
  enum_pages_blocks_accordion_spacing_top: typeof enum_pages_blocks_accordion_spacing_top;
  enum_pages_blocks_accordion_padding_bottom: typeof enum_pages_blocks_accordion_padding_bottom;
  enum_pages_blocks_accordion_padding_top: typeof enum_pages_blocks_accordion_padding_top;
  enum_pages_blocks_hotspot_zone_type: typeof enum_pages_blocks_hotspot_zone_type;
  enum_pages_blocks_hotspot_zone_appearance: typeof enum_pages_blocks_hotspot_zone_appearance;
  enum_pages_blocks_hotspot_zone_sort: typeof enum_pages_blocks_hotspot_zone_sort;
  enum_pages_blocks_hotspot_zone_spacing_bottom: typeof enum_pages_blocks_hotspot_zone_spacing_bottom;
  enum_pages_blocks_hotspot_zone_spacing_top: typeof enum_pages_blocks_hotspot_zone_spacing_top;
  enum_pages_blocks_hotspot_zone_padding_bottom: typeof enum_pages_blocks_hotspot_zone_padding_bottom;
  enum_pages_blocks_hotspot_zone_padding_top: typeof enum_pages_blocks_hotspot_zone_padding_top;
  enum_pages_hero_type: typeof enum_pages_hero_type;
  enum_pages_status: typeof enum_pages_status;
  enum__pages_v_version_hero_links_link_type: typeof enum__pages_v_version_hero_links_link_type;
  enum__pages_v_version_hero_links_link_appearance: typeof enum__pages_v_version_hero_links_link_appearance;
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type;
  enum__pages_v_blocks_cta_links_link_appearance: typeof enum__pages_v_blocks_cta_links_link_appearance;
  enum__pages_v_blocks_cta_spacing_bottom: typeof enum__pages_v_blocks_cta_spacing_bottom;
  enum__pages_v_blocks_cta_spacing_top: typeof enum__pages_v_blocks_cta_spacing_top;
  enum__pages_v_blocks_cta_padding_bottom: typeof enum__pages_v_blocks_cta_padding_bottom;
  enum__pages_v_blocks_cta_padding_top: typeof enum__pages_v_blocks_cta_padding_top;
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size;
  enum__pages_v_blocks_content_columns_padding_bottom: typeof enum__pages_v_blocks_content_columns_padding_bottom;
  enum__pages_v_blocks_content_columns_padding_top: typeof enum__pages_v_blocks_content_columns_padding_top;
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type;
  enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance;
  enum__pages_v_blocks_content_alignment: typeof enum__pages_v_blocks_content_alignment;
  enum__pages_v_blocks_content_spacing_bottom: typeof enum__pages_v_blocks_content_spacing_bottom;
  enum__pages_v_blocks_content_spacing_top: typeof enum__pages_v_blocks_content_spacing_top;
  enum__pages_v_blocks_content_padding_bottom: typeof enum__pages_v_blocks_content_padding_bottom;
  enum__pages_v_blocks_content_padding_top: typeof enum__pages_v_blocks_content_padding_top;
  enum__pages_v_blocks_content_radius_all: typeof enum__pages_v_blocks_content_radius_all;
  enum__pages_v_blocks_content_radius_top_left: typeof enum__pages_v_blocks_content_radius_top_left;
  enum__pages_v_blocks_content_radius_top_right: typeof enum__pages_v_blocks_content_radius_top_right;
  enum__pages_v_blocks_content_radius_bottom_left: typeof enum__pages_v_blocks_content_radius_bottom_left;
  enum__pages_v_blocks_content_radius_bottom_right: typeof enum__pages_v_blocks_content_radius_bottom_right;
  enum__pages_v_blocks_media_block_spacing_bottom: typeof enum__pages_v_blocks_media_block_spacing_bottom;
  enum__pages_v_blocks_media_block_spacing_top: typeof enum__pages_v_blocks_media_block_spacing_top;
  enum__pages_v_blocks_media_block_padding_bottom: typeof enum__pages_v_blocks_media_block_padding_bottom;
  enum__pages_v_blocks_media_block_padding_top: typeof enum__pages_v_blocks_media_block_padding_top;
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by;
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to;
  enum__pages_v_blocks_carousel_slides_link_type: typeof enum__pages_v_blocks_carousel_slides_link_type;
  enum__pages_v_blocks_carousel_slides_link_appearance: typeof enum__pages_v_blocks_carousel_slides_link_appearance;
  enum__pages_v_blocks_carousel_type: typeof enum__pages_v_blocks_carousel_type;
  enum__pages_v_blocks_carousel_spacing_bottom: typeof enum__pages_v_blocks_carousel_spacing_bottom;
  enum__pages_v_blocks_carousel_spacing_top: typeof enum__pages_v_blocks_carousel_spacing_top;
  enum__pages_v_blocks_carousel_padding_bottom: typeof enum__pages_v_blocks_carousel_padding_bottom;
  enum__pages_v_blocks_carousel_padding_top: typeof enum__pages_v_blocks_carousel_padding_top;
  enum__pages_v_blocks_accordion_spacing_bottom: typeof enum__pages_v_blocks_accordion_spacing_bottom;
  enum__pages_v_blocks_accordion_spacing_top: typeof enum__pages_v_blocks_accordion_spacing_top;
  enum__pages_v_blocks_accordion_padding_bottom: typeof enum__pages_v_blocks_accordion_padding_bottom;
  enum__pages_v_blocks_accordion_padding_top: typeof enum__pages_v_blocks_accordion_padding_top;
  enum__pages_v_blocks_hotspot_zone_type: typeof enum__pages_v_blocks_hotspot_zone_type;
  enum__pages_v_blocks_hotspot_zone_appearance: typeof enum__pages_v_blocks_hotspot_zone_appearance;
  enum__pages_v_blocks_hotspot_zone_sort: typeof enum__pages_v_blocks_hotspot_zone_sort;
  enum__pages_v_blocks_hotspot_zone_spacing_bottom: typeof enum__pages_v_blocks_hotspot_zone_spacing_bottom;
  enum__pages_v_blocks_hotspot_zone_spacing_top: typeof enum__pages_v_blocks_hotspot_zone_spacing_top;
  enum__pages_v_blocks_hotspot_zone_padding_bottom: typeof enum__pages_v_blocks_hotspot_zone_padding_bottom;
  enum__pages_v_blocks_hotspot_zone_padding_top: typeof enum__pages_v_blocks_hotspot_zone_padding_top;
  enum__pages_v_version_hero_type: typeof enum__pages_v_version_hero_type;
  enum__pages_v_version_status: typeof enum__pages_v_version_status;
  enum__pages_v_published_locale: typeof enum__pages_v_published_locale;
  enum_posts_status: typeof enum_posts_status;
  enum__posts_v_version_status: typeof enum__posts_v_version_status;
  enum__posts_v_published_locale: typeof enum__posts_v_published_locale;
  enum_customers_shippings_country: typeof enum_customers_shippings_country;
  enum_customers_last_buyer_type: typeof enum_customers_last_buyer_type;
  enum_orders_invoice_country: typeof enum_orders_invoice_country;
  enum_orders_shipping_address_country: typeof enum_orders_shipping_address_country;
  enum_orders_order_details_shipping: typeof enum_orders_order_details_shipping;
  enum_orders_order_details_status: typeof enum_orders_order_details_status;
  enum_products_variants_type: typeof enum_products_variants_type;
  enum_products_status: typeof enum_products_status;
  enum__products_v_version_variants_type: typeof enum__products_v_version_variants_type;
  enum__products_v_version_status: typeof enum__products_v_version_status;
  enum__products_v_published_locale: typeof enum__products_v_published_locale;
  enum_redirects_to_type: typeof enum_redirects_to_type;
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type;
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug;
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state;
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug;
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type;
  enum_header_type: typeof enum_header_type;
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type;
  enum_email_messages_messages_template: typeof enum_email_messages_messages_template;
  enum_shop_settings_available_currencies: typeof enum_shop_settings_available_currencies;
  enum_shop_layout_product_details_type: typeof enum_shop_layout_product_details_type;
  enum_shop_layout_product_list_filters: typeof enum_shop_layout_product_list_filters;
  enum_shop_layout_cart_and_wishlist_type: typeof enum_shop_layout_cart_and_wishlist_type;
  enum_shop_layout_checkout_type: typeof enum_shop_layout_checkout_type;
  enum_shop_layout_client_panel_type: typeof enum_shop_layout_client_panel_type;
  enum_inpost_pickup_delivery_zones_countries: typeof enum_inpost_pickup_delivery_zones_countries;
  enum_inpost_pickup_a_p_i_url: typeof enum_inpost_pickup_a_p_i_url;
  enum_inpost_courier_delivery_zones_countries: typeof enum_inpost_courier_delivery_zones_countries;
  enum_inpost_courier_a_p_i_url: typeof enum_inpost_courier_a_p_i_url;
  enum_inpost_courier_cod_delivery_zones_countries: typeof enum_inpost_courier_cod_delivery_zones_countries;
  enum_inpost_courier_cod_a_p_i_url: typeof enum_inpost_courier_cod_a_p_i_url;
  enum_paywalls_paywall: typeof enum_paywalls_paywall;
  enum_fulfilment_shop_address_country: typeof enum_fulfilment_shop_address_country;
  pages_hero_links: typeof pages_hero_links;
  pages_hero_links_locales: typeof pages_hero_links_locales;
  pages_blocks_cta_links: typeof pages_blocks_cta_links;
  pages_blocks_cta_links_locales: typeof pages_blocks_cta_links_locales;
  pages_blocks_cta: typeof pages_blocks_cta;
  pages_blocks_cta_locales: typeof pages_blocks_cta_locales;
  pages_blocks_content_columns: typeof pages_blocks_content_columns;
  pages_blocks_content_columns_locales: typeof pages_blocks_content_columns_locales;
  pages_blocks_content: typeof pages_blocks_content;
  pages_blocks_media_block: typeof pages_blocks_media_block;
  pages_blocks_archive: typeof pages_blocks_archive;
  pages_blocks_archive_locales: typeof pages_blocks_archive_locales;
  pages_blocks_form_block: typeof pages_blocks_form_block;
  pages_blocks_form_block_locales: typeof pages_blocks_form_block_locales;
  pages_blocks_carousel_slides: typeof pages_blocks_carousel_slides;
  pages_blocks_carousel_slides_locales: typeof pages_blocks_carousel_slides_locales;
  pages_blocks_carousel: typeof pages_blocks_carousel;
  pages_blocks_carousel_locales: typeof pages_blocks_carousel_locales;
  pages_blocks_accordion_items: typeof pages_blocks_accordion_items;
  pages_blocks_accordion_items_locales: typeof pages_blocks_accordion_items_locales;
  pages_blocks_accordion: typeof pages_blocks_accordion;
  pages_blocks_accordion_locales: typeof pages_blocks_accordion_locales;
  pages_blocks_hotspot_zone: typeof pages_blocks_hotspot_zone;
  pages_blocks_hotspot_zone_locales: typeof pages_blocks_hotspot_zone_locales;
  pages: typeof pages;
  pages_locales: typeof pages_locales;
  pages_rels: typeof pages_rels;
  _pages_v_version_hero_links: typeof _pages_v_version_hero_links;
  _pages_v_version_hero_links_locales: typeof _pages_v_version_hero_links_locales;
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links;
  _pages_v_blocks_cta_links_locales: typeof _pages_v_blocks_cta_links_locales;
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta;
  _pages_v_blocks_cta_locales: typeof _pages_v_blocks_cta_locales;
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns;
  _pages_v_blocks_content_columns_locales: typeof _pages_v_blocks_content_columns_locales;
  _pages_v_blocks_content: typeof _pages_v_blocks_content;
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block;
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive;
  _pages_v_blocks_archive_locales: typeof _pages_v_blocks_archive_locales;
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block;
  _pages_v_blocks_form_block_locales: typeof _pages_v_blocks_form_block_locales;
  _pages_v_blocks_carousel_slides: typeof _pages_v_blocks_carousel_slides;
  _pages_v_blocks_carousel_slides_locales: typeof _pages_v_blocks_carousel_slides_locales;
  _pages_v_blocks_carousel: typeof _pages_v_blocks_carousel;
  _pages_v_blocks_carousel_locales: typeof _pages_v_blocks_carousel_locales;
  _pages_v_blocks_accordion_items: typeof _pages_v_blocks_accordion_items;
  _pages_v_blocks_accordion_items_locales: typeof _pages_v_blocks_accordion_items_locales;
  _pages_v_blocks_accordion: typeof _pages_v_blocks_accordion;
  _pages_v_blocks_accordion_locales: typeof _pages_v_blocks_accordion_locales;
  _pages_v_blocks_hotspot_zone: typeof _pages_v_blocks_hotspot_zone;
  _pages_v_blocks_hotspot_zone_locales: typeof _pages_v_blocks_hotspot_zone_locales;
  _pages_v: typeof _pages_v;
  _pages_v_locales: typeof _pages_v_locales;
  _pages_v_rels: typeof _pages_v_rels;
  posts_populated_authors: typeof posts_populated_authors;
  posts: typeof posts;
  posts_locales: typeof posts_locales;
  posts_rels: typeof posts_rels;
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors;
  _posts_v: typeof _posts_v;
  _posts_v_locales: typeof _posts_v_locales;
  _posts_v_rels: typeof _posts_v_rels;
  media: typeof media;
  media_locales: typeof media_locales;
  categories_breadcrumbs: typeof categories_breadcrumbs;
  categories: typeof categories;
  categories_locales: typeof categories_locales;
  administrators_sessions: typeof administrators_sessions;
  administrators: typeof administrators;
  customers_shippings: typeof customers_shippings;
  customers_sessions: typeof customers_sessions;
  customers: typeof customers;
  orders_products: typeof orders_products;
  orders: typeof orders;
  products_details: typeof products_details;
  products_details_locales: typeof products_details_locales;
  products_colors: typeof products_colors;
  products_colors_locales: typeof products_colors_locales;
  products_sizes: typeof products_sizes;
  products_sizes_locales: typeof products_sizes_locales;
  products_variants_pricing: typeof products_variants_pricing;
  products_variants: typeof products_variants;
  products_categories_arr: typeof products_categories_arr;
  products_pricing: typeof products_pricing;
  products: typeof products;
  products_locales: typeof products_locales;
  products_rels: typeof products_rels;
  _products_v_version_details: typeof _products_v_version_details;
  _products_v_version_details_locales: typeof _products_v_version_details_locales;
  _products_v_version_colors: typeof _products_v_version_colors;
  _products_v_version_colors_locales: typeof _products_v_version_colors_locales;
  _products_v_version_sizes: typeof _products_v_version_sizes;
  _products_v_version_sizes_locales: typeof _products_v_version_sizes_locales;
  _products_v_version_variants_pricing: typeof _products_v_version_variants_pricing;
  _products_v_version_variants: typeof _products_v_version_variants;
  _products_v_version_categories_arr: typeof _products_v_version_categories_arr;
  _products_v_version_pricing: typeof _products_v_version_pricing;
  _products_v: typeof _products_v;
  _products_v_locales: typeof _products_v_locales;
  _products_v_rels: typeof _products_v_rels;
  product_categories: typeof product_categories;
  product_categories_locales: typeof product_categories_locales;
  product_sub_categories: typeof product_sub_categories;
  product_sub_categories_locales: typeof product_sub_categories_locales;
  product_reviews: typeof product_reviews;
  redirects: typeof redirects;
  redirects_rels: typeof redirects_rels;
  forms_blocks_checkbox: typeof forms_blocks_checkbox;
  forms_blocks_checkbox_locales: typeof forms_blocks_checkbox_locales;
  forms_blocks_country: typeof forms_blocks_country;
  forms_blocks_country_locales: typeof forms_blocks_country_locales;
  forms_blocks_email: typeof forms_blocks_email;
  forms_blocks_email_locales: typeof forms_blocks_email_locales;
  forms_blocks_message: typeof forms_blocks_message;
  forms_blocks_message_locales: typeof forms_blocks_message_locales;
  forms_blocks_number: typeof forms_blocks_number;
  forms_blocks_number_locales: typeof forms_blocks_number_locales;
  forms_blocks_select_options: typeof forms_blocks_select_options;
  forms_blocks_select_options_locales: typeof forms_blocks_select_options_locales;
  forms_blocks_select: typeof forms_blocks_select;
  forms_blocks_select_locales: typeof forms_blocks_select_locales;
  forms_blocks_state: typeof forms_blocks_state;
  forms_blocks_state_locales: typeof forms_blocks_state_locales;
  forms_blocks_text: typeof forms_blocks_text;
  forms_blocks_text_locales: typeof forms_blocks_text_locales;
  forms_blocks_textarea: typeof forms_blocks_textarea;
  forms_blocks_textarea_locales: typeof forms_blocks_textarea_locales;
  forms_emails: typeof forms_emails;
  forms_emails_locales: typeof forms_emails_locales;
  forms: typeof forms;
  forms_locales: typeof forms_locales;
  form_submissions_submission_data: typeof form_submissions_submission_data;
  form_submissions: typeof form_submissions;
  search_categories: typeof search_categories;
  search: typeof search;
  search_locales: typeof search_locales;
  search_rels: typeof search_rels;
  payload_jobs_log: typeof payload_jobs_log;
  payload_jobs: typeof payload_jobs;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  header_nav_items: typeof header_nav_items;
  header_nav_items_locales: typeof header_nav_items_locales;
  header: typeof header;
  header_locales: typeof header_locales;
  header_rels: typeof header_rels;
  footer_nav_items: typeof footer_nav_items;
  footer_nav_items_locales: typeof footer_nav_items_locales;
  footer: typeof footer;
  footer_locales: typeof footer_locales;
  footer_rels: typeof footer_rels;
  email_messages: typeof email_messages;
  shop_settings_available_currencies: typeof shop_settings_available_currencies;
  shop_settings_currency_values: typeof shop_settings_currency_values;
  shop_settings: typeof shop_settings;
  shop_layout: typeof shop_layout;
  shop_layout_locales: typeof shop_layout_locales;
  inpost_pickup_delivery_zones_countries: typeof inpost_pickup_delivery_zones_countries;
  inpost_pickup_delivery_zones_free_shipping: typeof inpost_pickup_delivery_zones_free_shipping;
  inpost_pickup_delivery_zones_range_pricing: typeof inpost_pickup_delivery_zones_range_pricing;
  inpost_pickup_delivery_zones_range: typeof inpost_pickup_delivery_zones_range;
  inpost_pickup_delivery_zones: typeof inpost_pickup_delivery_zones;
  inpost_pickup: typeof inpost_pickup;
  inpost_pickup_locales: typeof inpost_pickup_locales;
  inpost_courier_delivery_zones_countries: typeof inpost_courier_delivery_zones_countries;
  inpost_courier_delivery_zones_free_shipping: typeof inpost_courier_delivery_zones_free_shipping;
  inpost_courier_delivery_zones_range_pricing: typeof inpost_courier_delivery_zones_range_pricing;
  inpost_courier_delivery_zones_range: typeof inpost_courier_delivery_zones_range;
  inpost_courier_delivery_zones: typeof inpost_courier_delivery_zones;
  inpost_courier: typeof inpost_courier;
  inpost_courier_locales: typeof inpost_courier_locales;
  inpost_courier_cod_delivery_zones_countries: typeof inpost_courier_cod_delivery_zones_countries;
  inpost_courier_cod_delivery_zones_free_shipping: typeof inpost_courier_cod_delivery_zones_free_shipping;
  inpost_courier_cod_delivery_zones_range_pricing: typeof inpost_courier_cod_delivery_zones_range_pricing;
  inpost_courier_cod_delivery_zones_range: typeof inpost_courier_cod_delivery_zones_range;
  inpost_courier_cod_delivery_zones: typeof inpost_courier_cod_delivery_zones;
  inpost_courier_cod: typeof inpost_courier_cod;
  inpost_courier_cod_locales: typeof inpost_courier_cod_locales;
  paywalls: typeof paywalls;
  fulfilment: typeof fulfilment;
  relations_pages_hero_links_locales: typeof relations_pages_hero_links_locales;
  relations_pages_hero_links: typeof relations_pages_hero_links;
  relations_pages_blocks_cta_links_locales: typeof relations_pages_blocks_cta_links_locales;
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links;
  relations_pages_blocks_cta_locales: typeof relations_pages_blocks_cta_locales;
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta;
  relations_pages_blocks_content_columns_locales: typeof relations_pages_blocks_content_columns_locales;
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns;
  relations_pages_blocks_content: typeof relations_pages_blocks_content;
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block;
  relations_pages_blocks_archive_locales: typeof relations_pages_blocks_archive_locales;
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive;
  relations_pages_blocks_form_block_locales: typeof relations_pages_blocks_form_block_locales;
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block;
  relations_pages_blocks_carousel_slides_locales: typeof relations_pages_blocks_carousel_slides_locales;
  relations_pages_blocks_carousel_slides: typeof relations_pages_blocks_carousel_slides;
  relations_pages_blocks_carousel_locales: typeof relations_pages_blocks_carousel_locales;
  relations_pages_blocks_carousel: typeof relations_pages_blocks_carousel;
  relations_pages_blocks_accordion_items_locales: typeof relations_pages_blocks_accordion_items_locales;
  relations_pages_blocks_accordion_items: typeof relations_pages_blocks_accordion_items;
  relations_pages_blocks_accordion_locales: typeof relations_pages_blocks_accordion_locales;
  relations_pages_blocks_accordion: typeof relations_pages_blocks_accordion;
  relations_pages_blocks_hotspot_zone_locales: typeof relations_pages_blocks_hotspot_zone_locales;
  relations_pages_blocks_hotspot_zone: typeof relations_pages_blocks_hotspot_zone;
  relations_pages_locales: typeof relations_pages_locales;
  relations_pages_rels: typeof relations_pages_rels;
  relations_pages: typeof relations_pages;
  relations__pages_v_version_hero_links_locales: typeof relations__pages_v_version_hero_links_locales;
  relations__pages_v_version_hero_links: typeof relations__pages_v_version_hero_links;
  relations__pages_v_blocks_cta_links_locales: typeof relations__pages_v_blocks_cta_links_locales;
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links;
  relations__pages_v_blocks_cta_locales: typeof relations__pages_v_blocks_cta_locales;
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta;
  relations__pages_v_blocks_content_columns_locales: typeof relations__pages_v_blocks_content_columns_locales;
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns;
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content;
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block;
  relations__pages_v_blocks_archive_locales: typeof relations__pages_v_blocks_archive_locales;
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive;
  relations__pages_v_blocks_form_block_locales: typeof relations__pages_v_blocks_form_block_locales;
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block;
  relations__pages_v_blocks_carousel_slides_locales: typeof relations__pages_v_blocks_carousel_slides_locales;
  relations__pages_v_blocks_carousel_slides: typeof relations__pages_v_blocks_carousel_slides;
  relations__pages_v_blocks_carousel_locales: typeof relations__pages_v_blocks_carousel_locales;
  relations__pages_v_blocks_carousel: typeof relations__pages_v_blocks_carousel;
  relations__pages_v_blocks_accordion_items_locales: typeof relations__pages_v_blocks_accordion_items_locales;
  relations__pages_v_blocks_accordion_items: typeof relations__pages_v_blocks_accordion_items;
  relations__pages_v_blocks_accordion_locales: typeof relations__pages_v_blocks_accordion_locales;
  relations__pages_v_blocks_accordion: typeof relations__pages_v_blocks_accordion;
  relations__pages_v_blocks_hotspot_zone_locales: typeof relations__pages_v_blocks_hotspot_zone_locales;
  relations__pages_v_blocks_hotspot_zone: typeof relations__pages_v_blocks_hotspot_zone;
  relations__pages_v_locales: typeof relations__pages_v_locales;
  relations__pages_v_rels: typeof relations__pages_v_rels;
  relations__pages_v: typeof relations__pages_v;
  relations_posts_populated_authors: typeof relations_posts_populated_authors;
  relations_posts_locales: typeof relations_posts_locales;
  relations_posts_rels: typeof relations_posts_rels;
  relations_posts: typeof relations_posts;
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors;
  relations__posts_v_locales: typeof relations__posts_v_locales;
  relations__posts_v_rels: typeof relations__posts_v_rels;
  relations__posts_v: typeof relations__posts_v;
  relations_media_locales: typeof relations_media_locales;
  relations_media: typeof relations_media;
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs;
  relations_categories_locales: typeof relations_categories_locales;
  relations_categories: typeof relations_categories;
  relations_administrators_sessions: typeof relations_administrators_sessions;
  relations_administrators: typeof relations_administrators;
  relations_customers_shippings: typeof relations_customers_shippings;
  relations_customers_sessions: typeof relations_customers_sessions;
  relations_customers: typeof relations_customers;
  relations_orders_products: typeof relations_orders_products;
  relations_orders: typeof relations_orders;
  relations_products_details_locales: typeof relations_products_details_locales;
  relations_products_details: typeof relations_products_details;
  relations_products_colors_locales: typeof relations_products_colors_locales;
  relations_products_colors: typeof relations_products_colors;
  relations_products_sizes_locales: typeof relations_products_sizes_locales;
  relations_products_sizes: typeof relations_products_sizes;
  relations_products_variants_pricing: typeof relations_products_variants_pricing;
  relations_products_variants: typeof relations_products_variants;
  relations_products_categories_arr: typeof relations_products_categories_arr;
  relations_products_pricing: typeof relations_products_pricing;
  relations_products_locales: typeof relations_products_locales;
  relations_products_rels: typeof relations_products_rels;
  relations_products: typeof relations_products;
  relations__products_v_version_details_locales: typeof relations__products_v_version_details_locales;
  relations__products_v_version_details: typeof relations__products_v_version_details;
  relations__products_v_version_colors_locales: typeof relations__products_v_version_colors_locales;
  relations__products_v_version_colors: typeof relations__products_v_version_colors;
  relations__products_v_version_sizes_locales: typeof relations__products_v_version_sizes_locales;
  relations__products_v_version_sizes: typeof relations__products_v_version_sizes;
  relations__products_v_version_variants_pricing: typeof relations__products_v_version_variants_pricing;
  relations__products_v_version_variants: typeof relations__products_v_version_variants;
  relations__products_v_version_categories_arr: typeof relations__products_v_version_categories_arr;
  relations__products_v_version_pricing: typeof relations__products_v_version_pricing;
  relations__products_v_locales: typeof relations__products_v_locales;
  relations__products_v_rels: typeof relations__products_v_rels;
  relations__products_v: typeof relations__products_v;
  relations_product_categories_locales: typeof relations_product_categories_locales;
  relations_product_categories: typeof relations_product_categories;
  relations_product_sub_categories_locales: typeof relations_product_sub_categories_locales;
  relations_product_sub_categories: typeof relations_product_sub_categories;
  relations_product_reviews: typeof relations_product_reviews;
  relations_redirects_rels: typeof relations_redirects_rels;
  relations_redirects: typeof relations_redirects;
  relations_forms_blocks_checkbox_locales: typeof relations_forms_blocks_checkbox_locales;
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox;
  relations_forms_blocks_country_locales: typeof relations_forms_blocks_country_locales;
  relations_forms_blocks_country: typeof relations_forms_blocks_country;
  relations_forms_blocks_email_locales: typeof relations_forms_blocks_email_locales;
  relations_forms_blocks_email: typeof relations_forms_blocks_email;
  relations_forms_blocks_message_locales: typeof relations_forms_blocks_message_locales;
  relations_forms_blocks_message: typeof relations_forms_blocks_message;
  relations_forms_blocks_number_locales: typeof relations_forms_blocks_number_locales;
  relations_forms_blocks_number: typeof relations_forms_blocks_number;
  relations_forms_blocks_select_options_locales: typeof relations_forms_blocks_select_options_locales;
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options;
  relations_forms_blocks_select_locales: typeof relations_forms_blocks_select_locales;
  relations_forms_blocks_select: typeof relations_forms_blocks_select;
  relations_forms_blocks_state_locales: typeof relations_forms_blocks_state_locales;
  relations_forms_blocks_state: typeof relations_forms_blocks_state;
  relations_forms_blocks_text_locales: typeof relations_forms_blocks_text_locales;
  relations_forms_blocks_text: typeof relations_forms_blocks_text;
  relations_forms_blocks_textarea_locales: typeof relations_forms_blocks_textarea_locales;
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea;
  relations_forms_emails_locales: typeof relations_forms_emails_locales;
  relations_forms_emails: typeof relations_forms_emails;
  relations_forms_locales: typeof relations_forms_locales;
  relations_forms: typeof relations_forms;
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data;
  relations_form_submissions: typeof relations_form_submissions;
  relations_search_categories: typeof relations_search_categories;
  relations_search_locales: typeof relations_search_locales;
  relations_search_rels: typeof relations_search_rels;
  relations_search: typeof relations_search;
  relations_payload_jobs_log: typeof relations_payload_jobs_log;
  relations_payload_jobs: typeof relations_payload_jobs;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_header_nav_items_locales: typeof relations_header_nav_items_locales;
  relations_header_nav_items: typeof relations_header_nav_items;
  relations_header_locales: typeof relations_header_locales;
  relations_header_rels: typeof relations_header_rels;
  relations_header: typeof relations_header;
  relations_footer_nav_items_locales: typeof relations_footer_nav_items_locales;
  relations_footer_nav_items: typeof relations_footer_nav_items;
  relations_footer_locales: typeof relations_footer_locales;
  relations_footer_rels: typeof relations_footer_rels;
  relations_footer: typeof relations_footer;
  relations_email_messages: typeof relations_email_messages;
  relations_shop_settings_available_currencies: typeof relations_shop_settings_available_currencies;
  relations_shop_settings_currency_values: typeof relations_shop_settings_currency_values;
  relations_shop_settings: typeof relations_shop_settings;
  relations_shop_layout_locales: typeof relations_shop_layout_locales;
  relations_shop_layout: typeof relations_shop_layout;
  relations_inpost_pickup_delivery_zones_countries: typeof relations_inpost_pickup_delivery_zones_countries;
  relations_inpost_pickup_delivery_zones_free_shipping: typeof relations_inpost_pickup_delivery_zones_free_shipping;
  relations_inpost_pickup_delivery_zones_range_pricing: typeof relations_inpost_pickup_delivery_zones_range_pricing;
  relations_inpost_pickup_delivery_zones_range: typeof relations_inpost_pickup_delivery_zones_range;
  relations_inpost_pickup_delivery_zones: typeof relations_inpost_pickup_delivery_zones;
  relations_inpost_pickup_locales: typeof relations_inpost_pickup_locales;
  relations_inpost_pickup: typeof relations_inpost_pickup;
  relations_inpost_courier_delivery_zones_countries: typeof relations_inpost_courier_delivery_zones_countries;
  relations_inpost_courier_delivery_zones_free_shipping: typeof relations_inpost_courier_delivery_zones_free_shipping;
  relations_inpost_courier_delivery_zones_range_pricing: typeof relations_inpost_courier_delivery_zones_range_pricing;
  relations_inpost_courier_delivery_zones_range: typeof relations_inpost_courier_delivery_zones_range;
  relations_inpost_courier_delivery_zones: typeof relations_inpost_courier_delivery_zones;
  relations_inpost_courier_locales: typeof relations_inpost_courier_locales;
  relations_inpost_courier: typeof relations_inpost_courier;
  relations_inpost_courier_cod_delivery_zones_countries: typeof relations_inpost_courier_cod_delivery_zones_countries;
  relations_inpost_courier_cod_delivery_zones_free_shipping: typeof relations_inpost_courier_cod_delivery_zones_free_shipping;
  relations_inpost_courier_cod_delivery_zones_range_pricing: typeof relations_inpost_courier_cod_delivery_zones_range_pricing;
  relations_inpost_courier_cod_delivery_zones_range: typeof relations_inpost_courier_cod_delivery_zones_range;
  relations_inpost_courier_cod_delivery_zones: typeof relations_inpost_courier_cod_delivery_zones;
  relations_inpost_courier_cod_locales: typeof relations_inpost_courier_cod_locales;
  relations_inpost_courier_cod: typeof relations_inpost_courier_cod;
  relations_paywalls: typeof relations_paywalls;
  relations_fulfilment: typeof relations_fulfilment;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
